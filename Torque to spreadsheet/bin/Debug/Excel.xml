<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Excel</name>
    </assembly>
    <members>
        <member name="T:Docs.Excel.CompoundFile">
            <summary>
            CompoundFile.
            </summary>
        </member>
        <member name="M:Docs.Excel.CompoundFile.#ctor">
            <summary>
            Create a new Compound File
            </summary>
        </member>
        <member name="M:Docs.Excel.CompoundFile.#ctor(System.IO.Stream)">
            <summary>
            The constructor read compound document from the stream
            </summary>
            <param name="stream">The steam of the Excel File.</param>
        </member>
        <member name="M:Docs.Excel.CompoundFile.Save(System.IO.MemoryStream[],System.String[])">
            <summary>
            Save All Directory Streams to ComoundFile
            </summary>
        </member>
        <member name="M:Docs.Excel.CompoundFile.FindStream(System.String)">
            <summary>
            Locates the stream by name
            </summary>
            <param name="StreamName">The name of the string.</param>
            <returns>The stream bytes.</returns>
        </member>
        <member name="M:Docs.Excel.BinarySearchTreeBase`2.RotateLeft(`1)">
            <summary>
             Rebalance the tree by rotating the nodes to the left.
            </summary>        
        </member>
        <member name="M:Docs.Excel.BinarySearchTreeBase`2.RotateRight(`1)">
            <summary>
             Rebalance the tree by rotating the nodes to the right.
            </summary>
        </member>
        <member name="P:Docs.Excel.BinarySearchTreeBase`2.Size">
            <summary>
            The number of nodes contained in the tree.
            </summary>
        </member>
        <member name="T:Docs.Excel.RedBlackTree`1">
            <summary>
            A red-black tree must satisfy these properties:
            1. The root is black. 
            2. All leaves are black. 
            3. Red nodes can only have black children. 
            4. All paths from a node to its leaves contain the same number of black nodes.
            </summary>
        </member>
        <member name="M:Docs.Excel.RedBlackTree`1.FixupAfterInsert(Docs.Excel.RedBlackTreeNode{`0})">
            <summary>
            restores the red-black properties to the search tree
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Docs.Excel.RedBlackTree`1.FixupAfterDelete(Docs.Excel.RedBlackTreeNode{`0})">
            <summary>
            restores the red-black properties to the search tree
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Docs.Excel.Directory.#ctor">
            <summary>
            Create empty new Directory Storage.
            </summary>
        </member>
        <member name="M:Docs.Excel.Directory.#ctor(Docs.Excel.CompoundFile)">
            <summary>
            Create the Directory Storage on base of the opened Compound File
            </summary>
            <param name="CompoundFile">OLE2 structure of an Excel file.</param>
        </member>
        <member name="M:Docs.Excel.Directory.AddDirectoryEntry(System.String)">
            <summary>
            Add new Directory Entry
            </summary>
            <param name="StreamName">The name of new Entry</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.Directory.ReadStreamData">
            <summary>
            Read data of all Directory Entries
            </summary>
        </member>
        <member name="M:Docs.Excel.Directory.ReadMiniStreamEntryData(Docs.Excel.DirectoryEntry)">
            <summary>
            Read the stream data for obtain entry from MiniFAT.
            </summary>
        </member>
        <member name="M:Docs.Excel.Directory.ReadStreamEntryData(Docs.Excel.DirectoryEntry)">
            <summary>
            Read the stream data for obtain entry from FAT.
            </summary>
        </member>
        <member name="M:Docs.Excel.Directory.FindDirectoryEntry(Docs.Excel.DirectoryEntry,System.String)">
            <summary>
            Locates the stream by name
            </summary>
            <returns>The searched entry.</returns>
        </member>
        <member name="M:Docs.Excel.Directory.SaveStreamData">
            <summary>
            Save all Directory Entries into the data Stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Docs.Excel.DirectoryEntry">
            <summary>
            Directory Entry Structure 
            The size of each directory entry is exactly 128 bytes.
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.NameBuffer">
            <summary>
            Character array of the name of the entry, always 16-bit Unicode characters,
            with trailing zero character (results in a maximum name length of 31 characters)
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.NameDataSize">
            <summary>
            Size of the used area of the character buffer of the name 
            (not character count), including the trailing zero character
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.EntryType">
            <summary>
            Type of the entry: 
            00H = Empty 03H = LockBytes (unknown)
            01H = User storage 04H = Property (unknown)
            02H = User stream 05H = Root storage
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.NodeColor">
            <summary>
            Node colour of the entry: 00H = Red 01H = Black
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.LeftChildDID">
            <summary>
            DID of the left child node inside the red-black tree of all direct members of the parent storage 
            (if this entry is a user storage or stream), ЁC1 if there is no left child
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.RightChildDID">
            <summary>
            DID of the right child node inside the red-black tree of all direct members of the parent storage
            (if this entry is a user storage or stream), ЁC1 if there is no right child
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.MembersTreeNodeDID">
            <summary>
            The directory organises direct members (storages and streams) of each storage in a separate red-black tree.
            DID of the root node entry of the red-black tree of all storage members
            (if this entry is a storage), ЁC1 otherwise
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.UniqueIdentifier">
            <summary>
            Unique identifier, if this is a storage (not of interest in the following, may be all 0)
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.UserFlags">
            <summary>
            User flags (not of interest in the following, may be all 0)
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.CreationTime">
            <summary>
            Time stamp of creation of this entry.
            Most implementations do not write a valid time stamp, but fill up this space with zero bytes.
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.LastModificationTime">
            <summary>
            Time stamp of last modification of this entry. 
            Most implementations do not write a valid time stamp, but fill up this space with zero bytes.
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.FirstSectorID">
            <summary>
            SID of first sector or short-sector, if this entry refers to a stream,
            SID of first sector of the short-stream container stream, if this is the root storage entry,
            0 otherwise
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.StreamLength">
            <summary>
            Total stream size in bytes, if this entry refers to a stream,
            total size of the shortstream container stream, if this is the root storage entry, 
            0 otherwise
            </summary>
        </member>
        <member name="F:Docs.Excel.DirectoryEntry.UnUsed">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.#ctor(System.IO.BinaryReader)">
            <summary>
            Read the entry.
            </summary>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.#ctor(System.String)">
            <summary>
            Create new entry.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.AddChild(Docs.Excel.DirectoryEntry)">
            <summary>
            The method to fill Members items.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.ReadDirectoryEntry(System.IO.BinaryReader)">
            <summary>
            Read Entry structre
            </summary>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.ReadDirectoryEntry(System.IO.BinaryReader,System.Int32,Docs.Excel.DirectoryEntry,System.Collections.Generic.Dictionary{System.Int32,Docs.Excel.DirectoryEntry})">
            <summary>
            Read Directory Entry and its Members/LeftChild/RightChild
            </summary>
            <param name="reader">Data for reading</param>
            <param name="ID">ID of readed Entry</param>
            <param name="parent">Parent</param>
            <param name="DirectoryEntries">All Entries of Document</param>
        </member>
        <member name="M:Docs.Excel.DirectoryEntry.WriteDirectoryEntry(System.IO.BinaryWriter)">
            <summary>
            Write Entry structre
            </summary>
        </member>
        <member name="T:Docs.Excel.Function">
            <summary>
            Base class for classes representing supported function.
            </summary>
        </member>
        <member name="M:Docs.Excel.Function.#ctor">
            <summary>
            Initializes a new instance of class.
            </summary>
        </member>
        <member name="M:Docs.Excel.Function.Calculate(System.Object[])">
            <summary>
            Calculates the value of the function.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Docs.Excel.Function.IsFuncVar">
            <summary>
            Checks whether the function of a variable number of input parameters.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.NumOfArgMin">
            <summary>
            Returns a minimum number of parameters this function requires.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.NumOfArgMax">
            <summary>
            Returns a maximum number of parameters this function requires.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.ID">
            <summary>
            Returns a function identifier used in tFunc and tFuncVar tokens.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.Name">
            <summary>
            Returns a English name of the function.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.ParamClass">
            <summary>
            Returns are token classes expected by the respective parameters of the function.
            </summary>
        </member>
        <member name="P:Docs.Excel.Function.RetClass">
            <summary>
            Returns a default token class of the return value
            </summary>
        </member>
        <member name="F:Docs.Excel.MathUtilities.powers">
            <summary>
            table of the first ten powers of ten (avoids Math.Pow)
            </summary>
        </member>
        <member name="M:Docs.Excel.MathUtilities.round(System.Double,System.Int32)">
            <summary>
            rounds a double precision number to the specified number 
            of decimal places
            </summary>
            <param name="number">
            double precision value to round
            </param>
            <param name="decimal_places">
            number of decimal points to maintain
            </param>
            <returns>
            double precision value rounded to the specified decimal 
            places
            </returns>
            <exception>
            ArgumentException if decimal places not in the range [0,9]
            </exception>
            <remarks>
            uses round half up rule for tie-breaking
            </remarks>
            <see cref="!:http://en.wikipedia.org/wiki/Rounding"/>
            <algorithm>
            1. Multiple the original number by 10^decimal_places
            2. Add 0.5 and round the result (truncate to an integer)
            3. Divide result by 10^decimal_places
            </algorithm>
            <copyright>
            Distributed under the Code Project Open License
            http://www.codeproject.com/info/cpol10.aspx
            </copyright>
        </member>
        <member name="M:Docs.Excel.MathUtilities.rad2deg(System.Double)">
            <summary>
            converts radians to degrees
            </summary>
            <param name="radians">
            double precision radians value to be converted
            </param>
            <returns>
            double precision degrees obtained by converting radians
            </returns>
            <see>
            http://en.wikipedia.org/wiki/Radian
            </see>
        </member>
        <member name="M:Docs.Excel.MathUtilities.deg2rad(System.Double)">
            <summary>
            converts degrees to radians
            </summary>
            <param name="degrees">
            double precision degrees value to be converted
            </param>
            <returns>
            double precision radians obtained by converting degrees
            </returns>
            <see>
            http://en.wikipedia.org/wiki/Radian
            </see>
        </member>
        <member name="T:Docs.Excel.PrintArea">
            <summary>
            Represets set methods for set print area.
            </summary>
        </member>
        <member name="M:Docs.Excel.PrintArea.SetPrintArea(Docs.Excel.ExcelCell,Docs.Excel.ExcelCell)">
            <summary>
            Set print area.
            </summary>
            <param name="topLeft">Reference to the top left cell of print area.</param>
            <param name="bottomRight">Reference to the bottom right cell of print area.</param>
        </member>
        <member name="M:Docs.Excel.PrintArea.SetPrintArea(Docs.Excel.ExcelCell)">
            <summary>
            Set print area.
            </summary>
            <param name="range">Reference to the cell range of print area.</param>
        </member>
        <member name="M:Docs.Excel.PrintArea.SetPrintArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set print area.
            </summary>
            <param name="topLeftRowIndex">Row index of top left cell of print area.</param>
            <param name="topLeftColumnIndex">Column index of top left cell of print area.</param>
            <param name="bottomRightRowIndex">Row index of top bottom right of print area.</param>
            <param name="bottomRightColumnIndex">Column index of bottom right cell of print area.</param>
        </member>
        <member name="M:Docs.Excel.PrintArea.ClearPrintArea">
            <summary>
            Clear the print area.
            </summary>
        </member>
        <member name="M:Docs.Excel.PrintArea.GetPrintArea(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns the indexes of cell of the print area.
            </summary>
            <param name="topLeftRow">Row index of top left cell of print area.</param>
            <param name="topLeftColumn">Column index of top left cell of print area.</param>
            <param name="bottomRightRow">Row index of top bottom right of print area.</param>
            <param name="bottomRightColumn">Column index of bottom right cell of print area.</param>
        </member>
        <member name="P:Docs.Excel.PrintArea.HasPrintArea">
            <summary>
            Returns True if print area is set; otherwise - Else.
            </summary>
        </member>
        <member name="T:Docs.Excel.WorksheetOrientation">
            <summary>
            Represent worksheet orientation.
            </summary>
        </member>
        <member name="F:Docs.Excel.WorksheetOrientation.Landscape">
            <summary>
            Landscape worksheet orientation.
            </summary>
        </member>
        <member name="F:Docs.Excel.WorksheetOrientation.Portrait">
            <summary>
            Portrait worksheet orientation.
            </summary>
        </member>
        <member name="M:Docs.Excel.BasicExcelCellStyle.#ctor(Docs.Excel.XF,Docs.Excel.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class ExcelCellStyle.
            </summary>
            <param name="Xf">XF that contain the data for CellStyle.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:Docs.Excel.BasicExcelCellStyle.#ctor(Docs.Excel.BasicExcelCellStyle,Docs.Excel.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class BasicExcelCellStyle on base of an existing BasicExcelCellStyle.
            </summary>
            <param name="Style">The existing BasicExcelCellStyle from which the new BasicExcelCellStyle is created.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:Docs.Excel.ExcelCellBorder"/>).
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Font">
            <summary>
            Gets or sets ExcelCellFont related settings (<see cref="T:Docs.Excel.ExcelCellFont"/>). 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.HorizontalAlignment">
            <summary>
            Gets or sets a horizontal alignment. 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.VerticalAlignment">
            <summary>
            Gets or set a vertical alignment. 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Locked">
            <summary>
            Gets of sets if the ExcelCell is locked.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.StringFormat">
            <summary>
            Gets or sets a format string that will be used to interpret and display ExcelCell value.
            <remarks>For more information on number format strings consult Microsoft Excel documentation.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Rotation">
            <summary>
            Gets or sets ExcelCell data rotation. Value must be between -90 and 90.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.IsVerticalText">
            <summary>
            Gets of sets whether the ExcelCell text is displayed in a vertical style.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.WrapText">
            <summary>
            Gets or sets if the text is Wrapped.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Hidden">
            <summary>
            Gets of sets if the ExcelCell is hidden.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.Indent">
            <summary>
            Gets cell data indentation.     
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.PatternFillStyle">
            <summary>
            Gets or sets fill pattern. 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.PatternForeColor">
            <summary>
            Gets or sets fill pattern foreground color. 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.BackgroundColor">
            <summary>
            Gets or sets background color. 
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCellStyle.IsDefaultStyle">
            <summary>
            Gets of sets default style.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelPictureCollection">
            <summary>
            Collection of the <see cref="T:Docs.Excel.ExcelPicture"/>.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelPictureCollection.Add(System.String)">
            <summary>
            Add an image from file.
            </summary>
            <param name="FileName">Image file name.</param>
        </member>
        <member name="M:Docs.Excel.ExcelPictureCollection.Remove(System.Int32)">
            <summary>
            Reamoves the picture from the collection.
            </summary>
            <param name="PictureId">Picture ID.</param>
            <returns>Return True if the picture was found and deleted; otherwise - false.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelPictureCollection.RemoveAt(System.Int32)">
            <summary>
            Reamoves the picture from the collection.
            </summary>
            <param name="PictureIndex">Index of the picture.</param>
            <returns></returns>
        </member>
        <member name="P:Docs.Excel.ExcelPictureCollection.Count">
            <summary>
            Count of pictures in the collection.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPictureCollection.Item(System.Int32)">
            <summary>
            Returns the picture uzing zero-base index.
            </summary>
            <param name="Index">Picture index.</param>
            <returns>An instance of <see cref="T:Docs.Excel.ExcelPicture"/> object.</returns>
        </member>
        <member name="T:Docs.Excel.FormulaParser">
            <summary>
            Contains static methods for working with formulas.
            </summary>
        </member>
        <member name="M:Docs.Excel.FormulaParser.StringToRPN(System.String,Docs.Excel.ExcelWorksheet)">
            <summary>
            Converts a string to the formula in Reverse-Polish Notation.
            </summary>
            <param name="Formula">A string that contains the formula.</param>
            <param name="WSheet">ExcelWorksheet which contains a cell with a formula.</param>
            <returns>Reverse-Polish Notation.</returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.Parse(System.String,Docs.Excel.ExcelWorksheet,Docs.Excel.Function,System.Byte@)">
            <summary>
            Parsing input string and create Reverse-Polish Notation.
            </summary>
            <param name="Formula">The string what contained formula.</param>
            <param name="WSheet">The ExcelWorksheet what contained formula.</param>
            <param name="Func"></param>
            <param name="Count"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.Calculate(System.Byte[],Docs.Excel.ExcelWorksheet)">
            <summary>
            Method calculates the value of Reverse-Polish Notation.
            </summary>
            <param name="RPN">Method calculates the value of Reverse-Polish Notation.</param>
            <param name="Wsheet">A ExcelWorksheet that contains cells which take part in the formula.</param>
            <returns>Result of calculation.</returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.FindUsedCells(System.Byte[],Docs.Excel.BasicExcelCell,Docs.Excel.ExcelWorksheet)">
            <summary>
            Finds and returns the cells that are involved in the formula.
            </summary>
            <param name="RPN">Reverse-Polish Notation.</param>
            <param name="ParentCell">Referance to parental cell.</param>
            <param name="Wsheet">ExcelWorksheet contains cells which take part in the formula.</param>
            <returns>List of cells that are involved in the formula.</returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.ReplaceRefNToRef(System.Int32,System.Int32,Docs.Excel.SHRFMLA)">
            <summary>
            Replasing referens RefN-type to Ref-type.
            </summary>
            <param name="RowIndex">The zero-based index of ExcelRow.</param>
            <param name="ColIndex">The zero-based index of  ExcelColumn.</param>
            <param name="ShrFrma">The instance of class SHRFMLA which contain data of formulas.</param>
            <returns>RPN of formula for cell.</returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.ReplaceRef(System.Byte[]@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Replase index of ExcelRow and index of ExcelColumn in RPN.
            </summary>
            <param name="RPN">The original RPN.</param>
            <param name="Index">The index of row or column.</param>
            <param name="IsRow">True if changes an index of ExcelRow; otherwise false.</param>
            <param name="IsAdd">True if the index increases; otherwise false.</param>
        </member>
        <member name="M:Docs.Excel.FormulaParser.CorollaryFormula(System.String,System.Int32)">
            <summary>
            Finds subformula in formula string.
            </summary>
            <param name="Formula">String of formula.</param>
            <param name="StartInd">The zero-based starting character position of a subformula in this instance.</param>
            <returns>A String object containing subformula.</returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.GetIDOfRef(Docs.Excel.Function,System.Byte,System.Byte,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="Func"></param>
            <param name="Count"></param>
            <param name="Type">If 0x03 - name; if 0x04 - Ref; If 0x05 - tArea; if 0x09 - MemFunc</param>
            <param name="LeftChar"></param>
            <param name="RightChar"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.GetIDOfRetFunc(Docs.Excel.Function)">
            <summary>
            
            </summary>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.FormulaParser.AddBytes(System.Collections.Generic.List{System.Byte}@,System.Int16)">
            <summary>
            Converts the specified value to an array of bytes and adds to the end RPN.
            </summary>
            <param name="RPN">The value to convert.</param>
            <param name="Value">RPN to be added bytes.</param>
        </member>
        <member name="M:Docs.Excel.FormulaParser.AddBytes(System.Collections.Generic.List{System.Byte}@,System.Double)">
            <summary>
            Converts the specified value to an array of bytes and adds to the end RPN.
            </summary>
            <param name="RPN">The value to convert.</param>
            <param name="Value">RPN to be added bytes.</param>
        </member>
        <member name="M:Docs.Excel.FormulaParser.SetOrerators(System.Collections.Generic.Stack{System.Byte}@,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            Transfers operators from a specified stack to the specified RPN in order of priority.
            </summary>
            <param name="stack">The stack a contained operators.</param>
            <param name="RPN">RPN to be transferred operators.</param>
        </member>
        <member name="T:Docs.Excel.ExcelWorksheetProtection">
            <summary>
            Represents options of worksheet protection.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetProtection.#ctor">
            <summary>
            Initializes a new instance of class ProtectedSheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.IsProtected">
            <summary>
            The sheet is protected if True; otherwise - false.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.Password">
            <summary>
            Sets a password protection of worksheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.AutoFilter">
            <summary>
            Autofilters are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.DeleteColumns">
            <summary>
            Column Deleting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.DeleteRows">
            <summary>
            Row Deleting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.FormatCells">
            <summary>
            Formatting cells are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.FormatColumns">
            <summary>
            Column Formatting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.FormatRows">
            <summary>
            Row Formatting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.InsertColumns">
            <summary>
            Column Inserting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.InsertHyperlinks">
            <summary>
            Inserting of hyperlink is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.InsertRows">
            <summary>
            Row Inserting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.Objects">
            <summary>
            Objects are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.PivotTables">
            <summary>
            Pivot tables are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.Scenarios">
            <summary>
            Scenarios are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.SelectLockedCells">
            <summary>
            Selection of locked cells is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.SelectUnlockedCells">
            <summary>
            Selection of unlocked cells is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetProtection.Sort">
            <summary>
            Sorting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="T:Docs.Excel.RichTextString">
            <summary>
            Represents rich text.
            </summary>
        </member>
        <member name="M:Docs.Excel.RichTextString.Add(System.String,Docs.Excel.ExcelCellFont)">
            <summary>
            Adds a new text with specified font to the end of existent rich text string.
            </summary>
            <param name="UserString">A new rich text string.</param>
            <param name="UsingFont">A font that have rich text string.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.Insert(System.Int32,System.String,Docs.Excel.ExcelCellFont)">
            <summary>
            Inserts a new rich text string at the specified position of exist rich text string.
            </summary>
            <param name="Position">The zero-based index at which a new rich text string should be inserted.</param>
            <param name="UserString">The new rich text string to insert.</param>
            <param name="UsingFont">A font that have rich text string.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.RemoveAt(System.Int32)">
            <summary>
            Removes the rich text string at the specified index.
            </summary>
            <param name="Index">The zero-based index of the rich text string to remove.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.Split(System.Int32,System.Int32)">
            <summary>
            Splits the specified rich text string on two from the specified position.
            </summary>
            <param name="Index">The specified index of rich text string.</param>
            <param name="Position">The zero-based position at which a rich text string should be splits.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.Clear">
            <summary>
            Clean up of rich text.
            </summary>
        </member>
        <member name="M:Docs.Excel.RichTextString.ToString">
            <summary>
            Returns a string that represents the rich text.
            </summary>
            <returns>The string that represents the rich text.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.op_Equality(Docs.Excel.RichTextString,Docs.Excel.RichTextString)">
            <summary>
            Equal.
            </summary>
            <param name="lhs">Left string.</param>
            <param name="rhs">Right string</param>
            <returns>If Left and Right are equal - True.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.op_Inequality(Docs.Excel.RichTextString,Docs.Excel.RichTextString)">
            <summary>
            UnEqual.
            </summary>
            <param name="lhs">Left string.</param>
            <param name="rhs">Right string.</param>
            <returns>If Left and Right are <c>not</c> equal - True.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current RichTextString.
            </summary>
            <param name="obj">The Object to compare with the current RichTextString.</param>
            <returns>True if the specified Object is equal to the current RichTextString; otherwise, false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextString.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current RichTextString.</returns>
        </member>
        <member name="P:Docs.Excel.RichTextString.Item(System.Int32)">
            <summary>
            Gets the item of rich text string with the specified index.
            </summary>
            <param name="index">The zero-based index of rich text string.</param>
            <returns>The rich text string at the specified index of the rich text.</returns>
        </member>
        <member name="P:Docs.Excel.RichTextString.Count">
            <summary>
            Gets the number rich text strings in rich text.
            </summary>
        </member>
        <member name="T:Docs.Excel.RichTextStruct">
            <summary>
            Represents rich text string.
            </summary>
        </member>
        <member name="M:Docs.Excel.RichTextStruct.#ctor(System.String,Docs.Excel.ExcelCellFont)">
            <summary>
            Initializes a new instance of class RichTextStruct.
            </summary>
            <param name="userString">A rich text string.</param>
            <param name="font">A font that have rich text string.</param>
        </member>
        <member name="M:Docs.Excel.RichTextStruct.op_Equality(Docs.Excel.RichTextStruct,Docs.Excel.RichTextStruct)">
            <summary>
            Equal.
            </summary>
            <param name="lhs">Left struct.</param>
            <param name="rhs">Right struct.</param>
            <returns>If Left and Right are equal - True.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextStruct.op_Inequality(Docs.Excel.RichTextStruct,Docs.Excel.RichTextStruct)">
            <summary>
            UnEqual.
            </summary>
            <param name="lhs">Left struct.</param>
            <param name="rhs">Right struct.</param>
            <returns>If Left and Right are <c>not</c> equal - True.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextStruct.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current RichTextStruct.
            </summary>
            <param name="obj">The Object to compare with the current RichTextStruct.</param>
            <returns>True if the specified Object is equal to the current RichTextStruct; otherwise, false.</returns>
        </member>
        <member name="M:Docs.Excel.RichTextStruct.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current RichTextStruct.</returns>
        </member>
        <member name="P:Docs.Excel.RichTextStruct.RichString">
            <summary>
            Gets or sets a rich text string.
            </summary>
        </member>
        <member name="P:Docs.Excel.RichTextStruct.UsingFont">
            <summary>
            Gets or sets a font that have this rich text string.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfActivePane">
            <summary>
            Type of Active Pane
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfActivePane.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfActivePane.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfActivePane.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfActivePane.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfCellDataFormat">
            <summary>
            Defined type cell data format.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.DataTime">
            <summary>
            Data or Time.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Financial">
            <summary>
            Financial or Money.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Fractional">
            <summary>
            Fractional.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.General">
            <summary>
            General.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Numerical">
            <summary>
            Numerical.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Percentage">
            <summary>
            Percentage.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Textual">
            <summary>
            Textual.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCellDataFormat.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfCsvDelimeter">
            <summary>
            Formatting type for CSV files.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCsvDelimeter.CommaDelimited">
            <summary>
            Comma delimited CSV (most frequently used). 
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCsvDelimeter.SemicolonDelimited">
            <summary>
            Semicolon delimited CSV.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCsvDelimeter.TabDelimited">
            <summary>
            Tab delimited CSV. 
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCsvDelimeter.SpaceDelimited">
            <summary>
            Tab delimited CSV. 
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfMultipleBorders">
            <summary>
            Flags for borders and border groups that can be set on the excel cell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Outside">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Horizontal">
            <summary>
            Horzontal borders.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Vertical">
            <summary>
            Vertical borders.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.Diagonal">
            <summary>
            Diagonal borders.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfMultipleBorders.All">
            <summary>
            Vertical and horizontal borders.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfHeaderFooter">
            <summary>
            Represents type of Header/Footer.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHeaderFooter.Even">
            <summary>
            Even page header/footer value.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHeaderFooter.First">
            <summary>
            First page header/footer value.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHeaderFooter.Odd">
            <summary>
            Odd page header/footer value.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelPanes">
            <summary>
            This record stores the position of window panes.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPanes.FrozenRow">
            <summary>
            Gets or set the value indicates the number of row visible in the top pane.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPanes.FrozenColumn">
            <summary>
            Gets or set the value indicates the number of columns visible in the top pane.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPanes.TopLeftCell">
            <summary>
            Top Left Cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPanes.ActivePane">
            <summary>
            Active Pane
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPanes.IsFrozenPane">
            <summary>
            Return True if panes are frozen; otherwise - false.
            </summary>
        </member>
        <member name="T:Docs.Excel.WorksheetOptions">
            <summary>
            Excel worksheet view related options.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.Panes">
            <summary>
            Gets ExcelPanes.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.PrintArea">
            <summary>
            Provides access to print area settings.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.Zoom">
            <summary>
            Gets or sets the zoom of worksheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.Orientation">
            <summary>
            Gets or sets the worksheet orientation.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.ShowGridLines">
            <summary>
            If true, MS Excel shows grid lines. 
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.ShowHeadings">
            <summary>
            If true, MS Excel shows row and column headers.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.ActiveCell">
            <summary>
            Gets or sets the active cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.RightToLeft">
            <summary>
            If true, MS Excel shows columns from right to left.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorksheetOptions.IsHidden">
            <summary>
            Gets or set a worksheet is hidden.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellAnchor">
            <summary>
            This element specifies a two cell anchor placeholder for a group, a shape, or a drawing element.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellAnchor.#ctor">
            <summary>
            Initializes a new instance of class CellAnchor.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchor.EditAs">
            <summary>
            Gets or sets a settings for how DrawingML contents shall be resized.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchor.From">
            <summary>
            The Top-Left anchor point for the drawing element.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchor.To">
            <summary>
            The Bottom-Right anchor point for the drawing element.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellAnchorAddress">
            <summary>
            This element specifies the anchor point for the drawing element.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellAnchorAddress.#ctor">
            <summary>
            Initializes a new instance of the CellAnchorAddress.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchorAddress.Column">
            <summary>
            This element specifies the column that will be used to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchorAddress.ColumnOffset">
            <summary>
            This element is used to specify the column offset within a cell (in pixels).
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchorAddress.Row">
            <summary>
            This element specifies the row that will be used to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAnchorAddress.RowOffset">
            <summary>
            This element is used to specify the row offset within a cell (in pixels).
            </summary>
        </member>
        <member name="T:Docs.Excel.CodePage">
            <summary>
            This record stores the text encoding used to write byte strings, stored as MS Windows code page identifier.
            </summary>
        </member>
        <member name="M:Docs.Excel.CodePage.#ctor">
            <summary>
            Initializes a new instance of class XFRecord. Default code page = 1200.
            </summary>
        </member>
        <member name="T:Docs.Excel.HorizontalPageBreakCollection">
            <summary>
            Collection of horizontal page breaks (<see cref="T:Docs.Excel.HorizontalPageBreak"/>). 
            </summary>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.#ctor">
            <summary>
            Initializes the list of page breaks.
            </summary>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of collection HorizontalPageBreakCollection.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the HorizontalPageBreakCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if the record of PageBreak is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.Add(System.Int32)">
            <summary>
            Adds a new horizontal page break above the specified row. 
            </summary>
            <param name="Row">The zero-based index of the Row.</param>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.HasRow(System.Int32)">
            <summary>
            Checks whether the collection element at the specified index.
            </summary>
            <param name="columnIndex">Index of row.</param>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.Sort">
            <summary>
            Sorts the elements.
            </summary>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreakCollection.Remove(System.Int32)">
            <summary>
            Removes the specified page break. 
            </summary>
            <param name="rowIndex">The zero-based index of the Row.</param>
        </member>
        <member name="P:Docs.Excel.HorizontalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the horizontal page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break.</param>
        </member>
        <member name="P:Docs.Excel.HorizontalPageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="T:Docs.Excel._3DRefCollection">
            <summary>
            The main data of all types of references is stored in the _3DRefCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.#ctor">
            <summary>
            Initializes a new instance of class _3DRefCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.Add(Docs.Excel.Supbook)">
            <summary>
            Adds the specified Supbook in the _3DRefCollection.
            </summary>
            <param name="SupBook">The Supbook to be added to the _3DRefCollection.</param>
            <returns>The zero-based index of added of the Supbook.</returns>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.Add(Docs.Excel.RefStructures)">
            <summary>
            Adds the specified RefStructures in the ExternSheets.
            </summary>
            <param name="RefStructure">The RefStructures to be added to the ExternSheets.</param>
            <returns>The zero-based index of added of the RefStructures.</returns>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.Add(Docs.Excel.ExternSheet)">
            <summary>
            Adds the specified ExternSheet in the ExternSheets.
            </summary>
            <param name="ExternSheet">The ExternSheet to be added to the ExternSheets.</param>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.ReplaseIndOfSheet(System.Int32,System.Boolean)">
            <summary>
            Increases or decreases the index of ExcelWorksheet starting at the specified index.
            </summary>
            <param name="Index">The started index.</param>
            <param name="IsAdd">True if the increase index of ExcelWorksheets; otherwise false.</param>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.GetSupBook(System.Int16)">
            <summary>
            Return the Supbook with the specified index.
            </summary>
            <param name="Index">The zero-based index of Supbook.</param>
            <returns>The Supbook at the specified index.</returns>
        </member>
        <member name="M:Docs.Excel._3DRefCollection.GetExternSheet(System.Int16)">
            <summary>
            Return the RefStructures with the specified index.
            </summary>
            <param name="Index">The zero-based index of RefStructures.</param>
            <returns>The RefStructures at the specified index.</returns>
        </member>
        <member name="P:Docs.Excel._3DRefCollection.CountOfSupBookBlock">
            <summary>
            Gets count of Supbook in the _3DRefCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel._3DRefCollection.CountOfExternSheetRec">
            <summary>
            Gets count of ExternSheets in the _3DRefCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.ColumnDescriptor">
            <summary>
            Contains a description of the column.
            </summary>
        </member>
        <member name="M:Docs.Excel.ColumnDescriptor.#ctor(System.Int32,System.Int32,System.Int32,Docs.Excel.BasicExcelCellStyle)">
            <summary>
            Initialize a new instance of class ColumnDescriptor.
            </summary>
            <param name="Index">Index of column.</param>
            <param name="Width">Width of column.</param>
            <param name="Style">Style of column.</param>
        </member>
        <member name="T:Docs.Excel.DefinedFormats">
            <summary>
            Represents a list of common used formats.
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Numerical">
            <summary>
            Returns format string "0,00".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.NumericalWithDivided">
            <summary>
            Returns format string "# ##0,00".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Currency">
            <summary>
            Returns format string "# ##0,00" + CurrencySymbol of CurrentCulture.
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.CurrencyDollar">
            <summary>
            Returns format string "# ##0,00$"
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Financial">
            <summary>
            Returns format string "# ##0,00" + CurrencySymbol of CurrentCulture.
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.FinancicalDollar">
            <summary>
            Returns format string "# ##0,00$".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Data_Month_Day_One">
            <summary>
            Returns format string "MM.dd".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Data_Month_Day_Two">
            <summary>
            Returns format string "MMM.dd".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.DataFullOne">
            <summary>
            Returns format string "MM.dd.yy".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.DataFullTwo">
            <summary>
            Returns format string "MM.dd.yyyy".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.DataFullThree">
            <summary>
            Returns format string "MMM.dd.yyyy".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Time_AMPM_One">
            <summary>
            Returns format string "h:mm AM/PM".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Time_AMPM_Two">
            <summary>
            Returns format string "h:mm:ss AM/PM".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Time_24Hour_One">
            <summary>
            Returns format string "hh:mm:ss".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Time_24Hour_Two">
            <summary>
            Returns format string "hh:mm:ss".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Date_Time">
            <summary>
            Returns format string "MM.DD.YY h:mm".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Percentage">
            <summary>
            Returns format string "0%".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.PercentageWithDivided">
            <summary>
            Returns format string "0.00%".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.SimpleFraction">
            <summary>
            Returns format string "# ?/?".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.TwoNumberFraction">
            <summary>
            Returns format string "# ??/??".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.TreeNumberFraction">
            <summary>
            Returns format string "# ???/???".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Exponential">
            <summary>
            Returns format string "0.00E+00".
            </summary>
        </member>
        <member name="P:Docs.Excel.DefinedFormats.Textual">
            <summary>
            Returns format string "@".
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellRange">
            <summary>
            Represents cell range of <see cref="T:Docs.Excel.ExcelCell"/> elements contained in ExcelRow, ExcelColumn.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellRange.#ctor(Docs.Excel.ExcelWorksheet,Docs.Excel.BasicExcelCellStyle,System.Int32,System.Collections.Generic.SortedList{System.Int32,Docs.Excel.BasicExcelCell},System.Boolean)">
            <summary>
            Initializes a new instance of class ExcelCellRange.
            </summary>
            <param name="WSheet">ExcelWorksheet that will contain the created ExcelCellRange.</param>
            <param name="CellStyle">The style of ExcelRow or ExcelColumn.</param>
            <param name="IndexOfRow">The index of ExcelRow or ExcelColumn of the created ExcelCellRange.</param>
            <param name="Cells">List of ExcelCell which will contain in the created ExcelCellRange.</param>
            <param name="RowFlag">True if the created ExcelCellRange is ExcelRow, otherwise false.</param>
        </member>
        <member name="P:Docs.Excel.ExcelCellRange.Item(System.Int32)">
            <summary>
            Gets or sets ExcelCell with the specified index.
            </summary>
            <param name="Index">The zero-based specified index.</param>
            <returns>The ExcelCell with the specified index.</returns>
            <exception>
            An ExcelRowIndexException is incorrect value of index of ExcelRow.
            </exception>
            <exception>
            An ExcelColumnIndexException is incorrect value of index of ExcelColumn.
            </exception>
        </member>
        <member name="P:Docs.Excel.ExcelCellRange.Heigth">
            <summary>
            Gets a number of row in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellRange.Width">
            <summary>
            Gets a number of column in range.
            </summary>
        </member>
        <member name="T:Docs.Excel.WorkbookOptions">
            <summary>
            Options specified when reading CSV files.
            </summary>
        </member>
        <member name="M:Docs.Excel.WorkbookOptions.#ctor(Docs.Excel.ExcelWorkbook)">
            <summary>
            The constructor is not used.
            </summary>
        </member>
        <member name="M:Docs.Excel.WorkbookOptions.GetCompressionXLSX">
            <summary>
            Returns the compression level.
            </summary>
            <returns>The compression level.</returns>
        </member>
        <member name="P:Docs.Excel.WorkbookOptions.CsvDelimiter">
            <summary>
            Gets or sets the separating char for records.<br />
            Default value for this property is <c>TypeOfCsvDelimeter.SemicolonDelimited</c>. 
            </summary>
        </member>
        <member name="P:Docs.Excel.WorkbookOptions.IsCompressed">
            <summary>
            Gets or sets the specifies whether to use the compression for XLSX Excel files.<br />
            Default value for this property is <c>True</c>. 
            </summary>
        </member>
        <member name="P:Docs.Excel.WorkbookOptions.CsvCharacterEncoding">
            <summary>
            Gets or set character encoding of CSV data.
            </summary>
        </member>
        <member name="P:Docs.Excel.WorkbookOptions.Password">
            <summary>
            Gets or sets a password for encrypted workbook.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelChart">
            <summary>
            File created to handle Charts that may be associated to a picture.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelPicture">
            <summary>
            Picture object used by <see cref="T:Docs.Excel.ExcelPictureCollection"/> in the ExcelWorksheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelPicture.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromColumn">The column index of top left corner.</param>
        </member>
        <member name="M:Docs.Excel.ExcelPicture.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromColumn">The column index of top left corner.</param>
            <param name="ToRow">The row index of bottom right corner.</param>
            <param name="ToColumn">The column index of bottom right corner.</param>
        </member>
        <member name="M:Docs.Excel.ExcelPicture.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromRowOff">The vertical offset inside of top left cell.</param>
            <param name="FromColumn">The column index of top left corner.</param>
            <param name="FromColumnOff">The horizontal offset inside of top left cell.</param>
            <param name="ToRow">The row index of bottom right corner.</param>
            <param name="ToRowOff">The vertical offset inside of bottom right cell.</param>
            <param name="ToColumn">The column index of bottom right corner.</param>
            <param name="ToColumnOff">The horizontal offset inside of bottom right cell.</param>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Anchor">
            <summary>
            An anchor of the picture.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Descriptor">
            <summary>
            Picture Description.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Id">
            <summary>
            Picture ID.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Image">
            <summary>
            Image object of the picture.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Name">
            <summary>
            Picture Name.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.ImageType">
            <summary>
            Type of image your dealing with
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPicture.Chart">
            <summary>
            The Chart associated to the image
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellRangeException">
            <summary>
            Exception is thrown when accessing the range.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelException">
            <summary>
            ExcelException is the base class for exceptions thrown during use the component
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelCellRangeException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelCellRangeException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelDataFormatException">
            <summary>
            Exception is thrown when reading files stored incorrect data.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelDataFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelDataFormatException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelDataFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelDataFormatException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelTrialException">
            <summary>
            Exception is thrown when using a trial version
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelTrialException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelTrialException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelTrialException.#ctor(System.String,System.Exception)">
             <summary>
             Initializes a new instance of class ExcelTrialException.
             </summary>
            <param name="Message">The specified error message.</param>
             <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.AddressOfCellException">
            <summary>
            Exception is thrown when calculating the address of a cell.
            </summary>
        </member>
        <member name="T:Docs.Excel.FormulaException">
            <summary>
            Exception is thrown when processing formulas.
            </summary>
        </member>
        <member name="M:Docs.Excel.FormulaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.FormulaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Docs.Excel.AddressOfCellException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class AddressOfCellException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.AddressOfCellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.IdOfFunctionException">
            <summary>
            Exception is thrown when processing formulas.
            </summary>
        </member>
        <member name="M:Docs.Excel.IdOfFunctionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class IdOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.IdOfFunctionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class IdOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Docs.Excel.NotFoundOperandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class NotFoundOperandException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.NotFoundOperandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class NotFoundOperandException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.OperandOfFunctionException">
            <summary>
            Exception is thrown when calculating formulas.
            </summary>
        </member>
        <member name="M:Docs.Excel.OperandOfFunctionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class OperandOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.OperandOfFunctionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelColumnIndexException">
            <summary>
            Exception is thrown when referring to column.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelIndexException">
            <summary>
            Exception is thrown when referring to some elements.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelIndexException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelIndexException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumnIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumnIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelCellIndexException">
            <summary>
            Exception is thrown when referring to cells.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelRowIndexException">
            <summary>
            Exception is thrown when referring to row.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelRowIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.ExcelWorksheetIndexException">
            <summary>
            Exception is thrown when referring to worksheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Docs.Excel.FunctionAND">
            <summary>
            Returns TRUE if all arguments are TRUE.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionDATE">
            <summary>
            Returns the specified date in numeric format Microsoft Excel.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionDATEVALUE">
            <summary>
            Converts a date from text to numbers.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionDAY">
            <summary>
            Converts a serial number on the day of the month.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionHOUR">
            <summary>
            Converts a serial number to a clock.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionMINUTE">
            <summary>
            Converts a number to a minute.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionMONTH">
            <summary>
            Converts a date in numeric format in coming months.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionNOW">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="M:Docs.Excel.FunctionOR.#ctor(System.Int32)">
            <summary>
            Returns TRUE if at least one argument is TRUE.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionSECOND">
            <summary>
            Converts a date in numeric format in seconds.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionSLN">
            <summary>
            Calculates the value of direct property depreciation for one period.
            </summary>
        </member>
        <member name="M:Docs.Excel.FunctionSYD.#ctor(System.Int32)">
            <summary>
            Returns the depreciation of the asset over a given period, calculated by the sum of annual numbers.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionTIME">
            <summary>
            Returns the specified time in numeric format.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionTIMEVALUE">
            <summary>
            Converts a time in text format to number format.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionTODAY">
            <summary>
            Returns the current date.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionTRUE">
            <summary>
            Returns TRUE.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionWEEKDAY">
            <summary>
            Converts a serial number on the day of the week.
            </summary>
        </member>
        <member name="T:Docs.Excel.FunctionYEAR">
            <summary>
            Finds the year for specified a date.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelHeaderFooter">
            <summary>
            Represents the Header/Footer of ExcelWorksheet.
            </summary>
            <remarks>
            The header/footer string may contain special commands:<br />
            <br />
            &amp;&amp; The "&amp;" character itself<br />
            <br />
            &amp;L Start of the left section<br />
            &amp;C Start of the centred section<br />
            &amp;R Start of the right section<br />
            <br />
            &amp;P Current page number<br />
            &amp;N Page count<br />
            &amp;D Current date<br />
            &amp;T Current time<br />
            &amp;A Sheet name<br />
            &amp;F File name without path<br />
            &amp;Z File path without file name<br />
            <br />
            &amp;B Bold on/off<br />
            &amp;I Italic on/off<br />
            &amp;U Underlining on/off<br />
            &amp;E Double underlining on/off<br />
            &amp;S Strikeout on/off<br />
            &amp;X Superscript on/off<br />
            &amp;Y Subscript on/off<br />
            <br />
            &amp;"&lt;fontname&gt;" Sets new font &lt;fontname&gt;<br />
            <br />
            &amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;.
            The style &lt;fontstyle&gt; is in most cases one of "Regular", "Bold", "Italic", or "Bold Italic".
            But this setting is dependent on the used font, it may differ (localised style names, or "Standard", "Oblique", ...).<br />
            <br />
            &amp;&lt;fontheight&gt; Sets font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
            by a plain number to be printed in the header, it will be separated from the font height with a space character.
            </remarks>
        </member>
        <member name="M:Docs.Excel.ExcelHeaderFooter.#ctor(Docs.Excel.ExcelWorksheet,System.Boolean)">
            <summary>
            Initializes a new instance of class ExcelHeader.
            </summary>
            <param name="ParentWorksheet">ExcelWorksheet that will contain the created ExcelHeaderFooter.</param>
            <param name="IsHeader">True if Header; otherwise - false.</param>
        </member>
        <member name="M:Docs.Excel.ExcelHeaderFooter.#ctor(Docs.Excel.ExcelWorksheet,Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class ExcelHeader.
            </summary>
            <param name="ParentWorksheet">ExcelWorksheet that will contain the created ExcelHeaderFooter.</param>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ExcelHeader.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.FirstPageString">
            <summary>
            Gets or sets a first page header/footer value.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.DefaultString">
            <summary>
            Gets or sets a default page header/footer value.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.EvenPageString">
            <summary>
            Gets or sets a even page header/footer value.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.HasHeaderFooter">
            <summary>
            Gets true if worksheet has header/footer; otherwise false.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.IsDifferentFirst">
            <summary>
            Gets or sets a different first page header/footer. When true then first header/footer specify
            first page header/footer values. If false and first header/footer are present, they are ignored.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelHeaderFooter.IsDifferentOddEven">
            <summary>
            Gets or sets a different odd and even page headers and footers. When true then odd header/footer and 
            even header/footer specify page header/footer values for odd and even pages. If false then
            odd header/footer is used, even when header/footer are present.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelPictureAnchor">
            <summary>
            This simple type specifies all possible settings for how DrawingML contents shall be resized 
            when the rows and columns between its start and ending anchor (the from and to child elements) 
            are resized, or have additional rows/columns inserted within them. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPictureAnchor.Absolute">
            <summary>
            Do Not Move or Resize With Underlying Rows/Columns.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPictureAnchor.OneCell">
            <summary>
            Move With Cells but Do Not Resize.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelPictureAnchor.TwoCell">
            <summary>
            Move and Resize With Anchor Cells.
            </summary>
        </member>
        <member name="T:Docs.Excel.HyperlinkToolTip">
            <summary>
            The HLinkTooltip record specifies the hyperlink ToolTip associated with a range of cells.
            </summary>
        </member>
        <member name="M:Docs.Excel.HyperlinkToolTip.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class HyperlinkToolTip.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the HyperlinkToolTip record.</param>
            <exception>
            An ExcelDataFormatException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.TypeOfHyperlink">
            <summary>
            The type of hyperlink.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHyperlink.NONE">
            <summary>
            No hyperlink.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHyperlink.URL">
            <summary>
            The hyperlink is a remote url address.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHyperlink.FILE">
            <summary>
            The hyperlink is a local file.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHyperlink.BOOKMARK">
            <summary>
            The hyperlink is a bookmark.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfInputString">
            <summary>
            Represents the type of string of ExcelCell.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfScript">
            <summary>
            Represents the types of script of ExcelCellFont
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfScript.None">
            <summary>
            Normal script position. 
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfScript.Superscript">
            <summary>
            Superscript.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfScript.Subscript">
            <summary>
            Subscript.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfCells">
            <summary>
            Represents the types of ExcelCells.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Blank">
            <summary>
            Empty cell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Number">
            <summary>
            Cell contains a floating point value.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.LabelSST">
            <summary>
            Cell contains a LabelSST.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Formula">
            <summary>
            Cell contains a Formula.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Hyperlink">
            <summary>
            Cell contains a HyperLink.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.RK">
            <summary>
            Cell contains a RK-value.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.BoolErr">
            <summary>
            Cell contains a BoolErr.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Str">
            <summary>
            If Cell containing a formula string (xlsx only).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Boolean">
            <summary>
            If Cell containing a boolean (xlsx only).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfCells.Error">
            <summary>
            If Cell containing an error (xlsx only). 
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfDiagonal">
            <summary>
            Represents the types of diagonal line of cell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfDiagonal.None">
            <summary>
            No Diagonal lines.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfDiagonal.Down">
            <summary>
            Diagonal line from the top right corner to bottom left.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfDiagonal.Up">
            <summary>
            Diagonal line from the bottom left corner to top right.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfDiagonal.Both">
            <summary>
            Two diagonal lines.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfEscherRecord">
            <summary>
            The enumeration of TypeOfEscherRecord.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.DggContainer">
            <summary>
            OfficeArtDggContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BstoreContainer">
            <summary>
            OfficeArtBStoreContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.DgContainer">
            <summary>
            OfficeArtDgContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.SpgrContainer">
            <summary>
            OfficeArtSpgrContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.SpContainer">
            <summary>
            OfficeArtSpContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.SolverContainer">
            <summary>
            OfficeArtSolverContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.Dgg">
            <summary>
            OfficeArtFDGGBlock
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BSE">
            <summary>
            OfficeArtFBSE (File BLIP Store Entry)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.Dg">
            <summary>
            OfficeArtFDG
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.Spgr">
            <summary>
            OfficeArtFSPGR
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.Sp">
            <summary>
            OfficeArtFSP
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.OPT">
            <summary>
            OfficeArtFOPT
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.ChildAnchor">
            <summary>
            OfficeArtChildAnchor
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.ConnectorRule">
            <summary>
            OfficeArtFConnectorRule
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.AlignRule">
            <summary>
            OfficeArtFConnectorRule
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.ArcRule">
            <summary>
            OfficeArtFArcRule
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.CalloutRule">
            <summary>
            OfficeArtFCalloutRule
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipStart">
            <summary>
            OfficeArtBStoreContainerFileBlock
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipMetafileEMF">
            <summary>
            OfficeArtBlipEMF
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipMetafileWMF">
            <summary>
            OfficeArtBlipWMF
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipMetafilePICT">
            <summary>
            OfficeArtBlipPICT
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipBitmapJPEG">
            <summary>
            OfficeArtBlipJPEG
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipBitmapPNG">
            <summary>
            OfficeArtBlipPNG
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipBitmapDIB">
            <summary>
            OfficeArtBlipDIB
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.BlipEnd">
            <summary>
            OfficeArtBStoreContainerFileBlock
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.RegroupItems">
            <summary>
            OfficeArtFRITContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.ColorMRU">
            <summary>
            OfficeArtColorMRUContainer
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.DeletedPspl">
            <summary>
            OfficeArtFPSPL
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfEscherRecord.SplitMenuColors">
            <summary>
            OfficeArtSplitMenuColorContainer
            </summary>
        </member>
        <member name="T:Docs.Excel.ExternSheet">
            <summary>
            The record stores a list with indexes to Supbook records
            </summary>
        </member>
        <member name="M:Docs.Excel.ExternSheet.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class ExternSheet.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the XF record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.ExternSheet.#ctor(System.Collections.Generic.List{Docs.Excel.RefStructures})">
            <summary>
            Initializes a new instance of class ExternSheet.
            </summary>
            <param name="ExternSheets">ArrayList which contains RefStructures.</param>
        </member>
        <member name="P:Docs.Excel.ExternSheet.GetREFStructures">
            <summary>
            Gets the array of RefStructures.
            </summary>
        </member>
        <member name="T:Docs.Excel.RefStructures">
            <summary>
            Each RefStructures contains the following data: index to Supbook record; index to first Supbook sheet; index to last Supbook sheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.RefStructures.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class RefStructures.
            </summary>
            <param name="reader">The BinaryReader that contain the data for the RefStructures.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.RefStructures.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of class RefStructures.
            </summary>
            <param name="IndRec">The index to Supbook record.</param>
            <param name="FirstSheet">The index to first Supbook sheet.</param>
            <param name="LastSheet">The index to last Supbook sheet.</param>
        </member>
        <member name="P:Docs.Excel.RefStructures.IndSupBookRec">
            <summary>
            Gets or sets the index to Supbook record.
            </summary>
        </member>
        <member name="P:Docs.Excel.RefStructures.IndFirstSheet">
            <summary>
            Gets or sets the index to first Supbook sheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.RefStructures.IndLastSheet">
            <summary>
            Gets or sets the index to last Supbook sheet.
            </summary>
        </member>
        <member name="T:Docs.Excel.StandartFonts">
            <summary>
            Represents of collection of standart ExcelCellFont.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartFonts.#ctor">
            <summary>
            Initializes a new instance of class StandartFonts.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartFonts.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:Docs.Excel.StandartDefinedStyle">
            <summary>
            Represents of collection of standart StandartDefinedStyle.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartDefinedStyle.#ctor">
            <summary>
            Initializes a new instance of class StandartDefinedStyle.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartDefinedStyle.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:Docs.Excel.StandartXFCollection">
            <summary>
            Represents of collection of standart XF.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartXFCollection.#ctor">
            <summary>
            Initializes a new instance of class StandartXFCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel.StandartXFCollection.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:Docs.Excel.ColInfo">
            <summary>
            This record specifies the width and default ExcelCell formatting for a given range of ExcelColumns.
            </summary>
        </member>
        <member name="M:Docs.Excel.ColInfo.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class ColInfo.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ColInfo record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.ColumnInfoCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.ColInfo"/>) records.
            </summary>
        </member>
        <member name="M:Docs.Excel.ColumnInfoCollection.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ColumnInfoCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel.ColumnInfoCollection.AddColumnInfo(Docs.Excel.ColInfo)">
            <summary>
            Adds information about of the ExcelColumn.
            </summary>
            <param name="ColInfo">ColInfo containing information about of the ExcelColumn range.</param>
        </member>
        <member name="M:Docs.Excel.ColumnInfoCollection.GetColumnWidth(System.Int32)">
            <summary>
            Returns the width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
            <returns>Width of specified ExcelColumn.</returns>
        </member>
        <member name="M:Docs.Excel.ColumnInfoCollection.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
            <param name="ColWidth">Width of specified ExcelColumn.</param>
        </member>
        <member name="M:Docs.Excel.ColumnInfoCollection.SetDefColumnWidth(System.Int32)">
            <summary>
            Sets the default width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
        </member>
        <member name="P:Docs.Excel.ColumnInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the ColumnInfoCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColumnInfoCollection.DefColumnWidth">
            <summary>
            Gets or sets a default ExcelColumn width.
            </summary>
        </member>
        <member name="T:Docs.Excel.DefColWidth">
            <summary>
            This record specifies the default ExcelColumn width.
            </summary>
        </member>
        <member name="M:Docs.Excel.DefColWidth.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of the class DefColWidth.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the DefColWidth record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.DefColWidth.#ctor">
            <summary>
            Initializes a new instance of the class DefColWidth with standard parameters.
            </summary>
        </member>
        <member name="P:Docs.Excel.DefColWidth.Width">
            <summary>
            Gets or sets width of ExcelColumn.
            </summary>
        </member>
        <member name="T:Docs.Excel._2DRef">
            <summary>
            Structure to store a range of value of cells in the same sheet.
            </summary>
        </member>
        <member name="M:Docs.Excel._2DRef.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class _2DRef.
            </summary>
            <param name="TotalNumber">Number of value.</param>
        </member>
        <member name="P:Docs.Excel._2DRef.Item(System.Int32)">
            <summary>
            Get or set value with the specified index.
            </summary>
            <param name="index">The zero-based index of the elements to gets or set</param>
        </member>
        <member name="P:Docs.Excel._2DRef.Count">
            <summary>
            Gets the number of elements contained in the structure.
            </summary>
        </member>
        <member name="T:Docs.Excel.Functions">
            <summary>
            Contains static methods for working with functions.
            </summary>
        </member>
        <member name="M:Docs.Excel.Functions.InitFunctions">
            <summary>
            This method initializes the function.
            </summary>
        </member>
        <member name="M:Docs.Excel.Functions.GetFunction(System.String)">
            <summary>
            Returns of the function with specified name.
            </summary>
            <param name="FunctionName">The name of the function.</param>
            <returns>The specified index.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.GetFunction(System.Int16)">
            <summary>
            Returns of the function with specified ID.
            </summary>
            <param name="ID">The ID of the function.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.Functions.GetOperatorID(System.String)">
            <summary>
            Return of the ID of the specified operator.
            </summary>
            <param name="Operator">The name of the operator.</param>
            <returns>ID of the specified operator.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.Is2DRef(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class _2DRef.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of _2DRef, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsBool(System.String)">
            <summary>
            Checks whether the specified object is an instance of class Boolean.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of Boolean, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsDouble(System.String)">
            <summary>
            Checks whether the specified object is an instance of class Double.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of Double, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsDouble(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class Double.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of Double, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsFunction(System.String)">
            <summary>
            Checks whether the specified string is an name of function.
            </summary>
            <param name="FunctionName">String to be checked.</param>
            <returns>True, if the string is an name of function, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsNumber(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsNumber(System.Char)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="EnterChar">Object to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsNumber(System.String)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsOperator(System.Object)">
            <summary>
            Checks whether the specified object is an operator.
            </summary>
            <param name="obj">Objet to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsErorr(System.String)">
            <summary>
            Checks whether the specified string is an error string.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsErorr(System.Object)">
            <summary>
            Checks whether the specified object is an error string.
            </summary>
            <param name="obj">Objet to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.Functions.IsWorsheetName(System.String,Docs.Excel.ExcelWorksheet)">
            <summary>
            Checks whether the specified string is an name of worksheet.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <param name="WSheet">Any worksheet from workbook.</param>
            <returns>True, if the string is an name of worksheet, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.Calculate(System.Int16,System.Object[])">
            <summary>
            Calculates the value of the function.
            </summary>
            <param name="FunctionID">Specified index of function.</param>
            <param name="Values">Input parameters.</param>
            <returns>Result of calculating.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.ExcelDateToCSharp(System.Object[])">
            <summary>
            Convert DataTime from format of Excel to format of DOT.NET.
            </summary>
            <param name="Values">Value for formatting.</param>
            <returns>Instance DataTime equal the input value.</returns>
        </member>
        <member name="M:Docs.Excel.Functions.ObjectToDouble(System.Object[])">
            <summary>
            Converts a specified value to a double-precision floating-point number.
            </summary>
            <param name="obj">Value for converting.</param>
            <returns>A double-precision floating-point number that is equivalent to value, or zero if value is null.</returns>
            <exception>
            An OperandOfFunctionException is thrown if value is not in an appropriate format for a Double type.
            </exception>
        </member>
        <member name="M:Docs.Excel.Functions.ValidValueOfFormula(System.String)">
            <summary>
            Read the result of formula value
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeBOF">
            <summary>
            Sub stream types that determine the data that follows the BOF record.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.WorkbookGlobals">
            <summary>
            Sub stream type for data that apply to the entire workbook.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.VisualBasicModule">
            <summary>
            Sub stream type for visual basic modules.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.Worksheet">
            <summary>
            Sub stream type for Worksheet streams.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.Chart">
            <summary>
            Sub stream type for Chart streams.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.Excel4MacroSheet">
            <summary>
            Sub stream type for Excel 4.0 Macros.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeBOF.Workspace">
            <summary>
            Sub stream type for Workspaces.
            </summary>
        </member>
        <member name="T:Docs.Excel.BeginOfFile">
            <summary>
            Begin Of File (0x0809) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.BeginOfFile.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class BeginOfFile.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Begin Of File record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.BeginOfFile.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of class BeginOfFile.
            </summary>
            <param name="_Type">Type of begin of file.</param>
        </member>
        <member name="T:Docs.Excel.DifTable">
            <summary>
            Create table, which be kept sectors' number, which take up position FAT.
            </summary>
        </member>
        <member name="M:Docs.Excel.DifTable.#ctor(Docs.Excel.CompoundFile)">
            <summary>
            The constructur reads dif table from excel.
            </summary>
            <param name="CompoundFile">Parent Compound File.</param>
        </member>
        <member name="P:Docs.Excel.DifTable.Item(System.Int32)">
            <summary>
            Gets once block from DIF table with the specified index.
            </summary>
            <param name="Number">Specified index.</param>
            <returns>Block from DIF table.</returns>
        </member>
        <member name="T:Docs.Excel.ExcelCellBorder">
            <summary>
            Contains settings of ExcelCell border lines.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.#ctor(Docs.Excel.XF,Docs.Excel.BasicExcelCell)">
            <summary>
            Initializes a new instance of class ExcelCellBorder.
            </summary>
            <param name="Xf">XF record for ExcelCell.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.#ctor(Docs.Excel.ExcelCellBorder,Docs.Excel.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class ExcelCellBorder on base of an existing ExcelCellBorder.
            </summary>
            <param name="Prototip">The existing ExcelCellBorder from which the new ExcelCellBorder is created.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.GetMergedCell(System.Int32@,System.Int32@)">
            <summary>
            Returns list of BasicExcelCell which contains in merged.
            </summary>
            <param name="NumOfRow">Number of ExcelRow in merged.</param>
            <param name="NumOfColumn">Number of ExcelColumn in merged.</param>
            <returns>List of BasicExcelCell.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.op_Equality(Docs.Excel.ExcelCellBorder,Docs.Excel.ExcelCellBorder)">
            <summary>
            Equals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.op_Inequality(Docs.Excel.ExcelCellBorder,Docs.Excel.ExcelCellBorder)">
            <summary>
            UnEquals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current ExcelCellBorder.
            </summary>
            <param name="obj">The Object to compare with the current ExcelCellBorder.</param>
            <returns>True if the specified Object is equal to the current RichTextString; otherwise, false.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellBorder.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current ExcelCellBorder.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.LeftLineColor">
            <summary>
            Gets or sets a color of the left line.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.LeftLineStyle">
            <summary>
            Gets or sets a style of the left line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.RightLineColor">
            <summary>
            Gets or sets a color of the right line.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.RightLineStyle">
            <summary>
            Gets or sets a style of the right line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.TopLineColor">
            <summary>
            Gets or sets a color of the top line.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.TopLineStyle">
            <summary>
            Gets or sets a style of the top line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.BottomLineColor">
            <summary>
            Gets or sets a color of the bottom line.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.BottomLineStyle">
            <summary>
            Gets or sets a style of the bottom line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.Diagonal">
            <summary>
            Get or set a type of diagonal line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.DiagonalLineStyle">
            <summary>
            Gets or sets a style of the diagonal line.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellBorder.DiagonalLineColor">
            <summary>
            Gets or sets a color of the right line.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="T:Docs.Excel.BoundSheet">
            <summary>
            A BoundSheet record is written for each sheet. It stores the sheet name and stream offset to the BOF record from the ExcelWorkbook stream.
            </summary>
        </member>
        <member name="M:Docs.Excel.BoundSheet.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of the class BoundSheet.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BoundSheet record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.BoundSheet.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the BoundSheet class that is empty.
            </summary>
            <param name="BoundSheetName">Name of BoundSheet.</param>
        </member>
        <member name="T:Docs.Excel.ExcelCellAddress">
            <summary>
            This class contains a cell address including number of ExcelRow, number of ExcelColumn and number of ExcelWorkseet for individual cell.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellAddress.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class ExcelCellAddress.
            </summary>
            <param name="IndexOfRow">The number of ExcelRow.</param>
            <param name="IndexOfColumn">The number of ExcelColumn.</param>
            <param name="IndexOfWorkseet">The number of ExcelWorkseet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellAddress.op_Equality(Docs.Excel.ExcelCellAddress,Docs.Excel.ExcelCellAddress)">
            <summary>
            Equals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellAddress.op_Inequality(Docs.Excel.ExcelCellAddress,Docs.Excel.ExcelCellAddress)">
            <summary>
            UnEquals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current ExcelCellAddress.
            </summary>
            <param name="obj">The Object to compare with the current ExcelCellAddress.</param>
            <returns>True if the specified Object is equal to the current ExcelCellAddress; otherwise, false.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellAddress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current ExcelCellAddress.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellAddress.RowIndex">
            <summary>
            Gets the index of ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAddress.ColumnIndex">
            <summary>
            Gets the index of ExcelColumn.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellAddress.WsheetIndex">
            <summary>
            Gets the index of ExcelWorkseet.
            </summary>
        </member>
        <member name="T:Docs.Excel.FontRecord">
            <summary>
            Font to write to file.
            </summary>
        </member>
        <member name="M:Docs.Excel.FontRecord.#ctor(Docs.Excel.ExcelCellFont)">
            <summary>
            Initializes a new instance of class FontRecord.
            </summary>
            <param name="CellFont">The existing ExcelCellFont on the basis of which creates an instance of the class FontRecord.</param>
        </member>
        <member name="M:Docs.Excel.FontRecord.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:Docs.Excel.MergedExcelCells">
            <summary>
            A cell range address specifies a fixed cell range in the current sheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.MergedExcelCells.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class MergedExcelCells.
            </summary>
            <param name="reader">BinaryReader a contain data from MergedExcelCells record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.MergedExcelCells.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class MergedExcelCells.
            </summary>
            <param name="FirstRow">First ExcelRow index.</param>
            <param name="LastRow">Last ExcelRow index.</param>
            <param name="FirstColumn">First ExcelColumn index.</param>
            <param name="LastColumn">First ExcelColumn index.</param>
        </member>
        <member name="P:Docs.Excel.MergedExcelCells.FirstRow">
            <summary>
            Gets first ExcelRow of merged cell rage.
            </summary>
        </member>
        <member name="P:Docs.Excel.MergedExcelCells.LastRow">
            <summary>
            Gets last ExcelRow of merged cell rage.
            </summary>
        </member>
        <member name="P:Docs.Excel.MergedExcelCells.FirstColumn">
            <summary>
            Gets first ExcelColumn of merged cell rage.
            </summary>
        </member>
        <member name="P:Docs.Excel.MergedExcelCells.LastColumn">
            <summary>
            Gets last ExcelColumn of merged cell rage.
            </summary>
        </member>
        <member name="P:Docs.Excel.MergedExcelCells.IsMergered">
            <summary>
            Gets or sets a merged cell range.
            </summary>
        </member>
        <member name="T:Docs.Excel.Supbook">
            <summary>
            This record mainly stores the URL of an external document and a list of sheet names inside this document.
            </summary>
        </member>
        <member name="M:Docs.Excel.Supbook.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Supbook.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Supbook record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.Supbook.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class Supbook.
            </summary>
            <param name="NumOfWsheet">The number of ExcelWorksheet.</param>
        </member>
        <member name="T:Docs.Excel.HorizontalPageBreak">
            <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed. 
            </summary>
        </member>
        <member name="M:Docs.Excel.HorizontalPageBreak.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor reads the horizontal pagebreak structure from excel file.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Docs.Excel.HorizontalPageBreak.Row">
            <summary>
            Index of the first row of the new page. 
            </summary>
        </member>
        <member name="P:Docs.Excel.HorizontalPageBreak.FirstColumn">
            <summary>
            Index of the first column of the new page. 
            </summary>
        </member>
        <member name="P:Docs.Excel.HorizontalPageBreak.LastColumn">
            <summary>
            Index of the last column of the new page. 
            </summary>
        </member>
        <member name="T:Docs.Excel.VerticalPageBreak">
            <summary>
            Each class contains the following data: Index to first column of this page break; Index to first row of this page break;
            Index to last row of this pag break.
            </summary>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreak.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class VerticalPageBreak.
            </summary>
            <param name="reader">The BinaryReader record that should contain the correct type and data for the VerticalPageBreak.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="P:Docs.Excel.VerticalPageBreak.Column">
            <summary>
            Index of the first column of the new page. 
            </summary>
        </member>
        <member name="P:Docs.Excel.VerticalPageBreak.FirstRow">
            <summary>
            Index of the first row of the new page. 
            </summary>
        </member>
        <member name="P:Docs.Excel.VerticalPageBreak.LastRow">
            <summary>
            Index of the last row of the new page. 
            </summary>
        </member>
        <member name="T:Docs.Excel.VerticalPageBreakCollection">
            <summary>
            Collection of vertical page breaks (<see cref="T:Docs.Excel.VerticalPageBreak"/>). 
            </summary>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.#ctor">
            <summary>
            Initializes the list of page breaks.
            </summary>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of collection VerticalPageBreakCollection.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the VerticalPageBreakCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if the record of PageBreak is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.Add(System.Int32)">
            <summary>
            Adds a new vertical page break left to the specified column
            </summary>
            <param name="Column">The zero-based index of the Column.</param>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.HasColumn(System.Int32)">
            <summary>
            Checks whether the collection element at the specified index.
            </summary>
            <param name="columnIndex">Index of column.</param>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.Sort">
            <summary>
            Sorts the elements.
            </summary>
        </member>
        <member name="M:Docs.Excel.VerticalPageBreakCollection.Remove(System.Int32)">
            <summary>
            Removes the specified page break. 
            </summary>
            <param name="columnIndex">The zero-based index of the Column.</param>
        </member>
        <member name="P:Docs.Excel.VerticalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the vertical page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break.</param>
        </member>
        <member name="P:Docs.Excel.VerticalPageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="T:Docs.Excel.XFRecord">
            <summary>
            Xf-record for writing to file.
            </summary>
        </member>
        <member name="M:Docs.Excel.XFRecord.#ctor(Docs.Excel.XF)">
            <summary>
            Initializes a new instance of class XFRecord.
            </summary>
            <param name="Xf">The instance of class XF which the contain information of creating an instance of the class XFRecord.</param>
        </member>
        <member name="T:Docs.Excel.BoundSheetCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.BoundSheet"/>) records.
            </summary>
        </member>
        <member name="M:Docs.Excel.BoundSheetCollection.#ctor">
            <summary>
            Initializes a new instance of class BoundSheetTable.
            </summary>
        </member>
        <member name="M:Docs.Excel.BoundSheetCollection.AddBoundSheet(Docs.Excel.BoundSheet)">
            <summary>
            Adds the specified BoundSheet in the end of the BoundSheetCollection.
            </summary>
            <param name="NewBoundSheet">The BoundSheet to be added to the end of the BoundSheetCollection.</param>
        </member>
        <member name="P:Docs.Excel.BoundSheetCollection.Item(System.Int32)">
            <summary>
            Gets the BoundSheet record with the specified index.
            </summary>
            <param name="Index">The zero-based index of the BoundSheetCollection.</param>
            <returns>The BoundSheet at the specified index of the BoundSheetCollection.</returns>
        </member>
        <member name="P:Docs.Excel.BoundSheetCollection.Count">
            <summary>
            Gets the number of elements contained in the BoundSheetCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellCollection">
            <summary>
            Collection of cells (<see cref="T:Docs.Excel.ExcelCell"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelCellCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCellCollection.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.MoveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the cell including its data and properties.
            </summary>
            <param name="RowIndex">Row index of the cell.</param>
            <param name="ColumnIndex">Column index of the cell.</param>
            <param name="RowPosition">Row index of a new position of the cell.</param>
            <param name="ColumnPosition">Column index of a new position of the cell.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.MoveCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the cell including its data and properties.
            </summary>
            <param name="RowIndex">Row index of the cell.</param>
            <param name="ColumnIndex">Column index of the cell.</param>
            <param name="RowPosition">Row index of a new position of the cell.</param>
            <param name="ColumnPosition">Column index of a new position of the cell.</param>
            <param name="IsRecounFormulas">If true then formulas will be updated and recalculated.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.GetSimpleIndex(System.String,System.Int32)">
            <summary>
            Method is used for converting string address into integer index of the ExcelCell("A1"). 
            </summary>
            <param name="address">String address.</param>
            <param name="WorksheetNumber">Number of ExcelWorksheet.</param>
            <returns>Integer index.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.GetComplexIndex(System.String[],System.Int32)">
            <summary>
            Method is used for converting string addresses into integer indexes of multiple ExcelCell("A1:B4").
            </summary>
            <param name="address">Array contains string address of the first ExcelCell and the last ExcelCell.</param>
            <param name="WorksheetNumber">Number of ExcelWorksheet.</param>
            <returns>Array contains indexes of all ExcelCell.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellCollection.Transposition(System.Int32@,System.Int32@)">
            <summary>
            Swaps the first and second value.
            </summary>
            <param name="FirstNum">First value.</param>
            <param name="SecondNum">Second value.</param>
        </member>
        <member name="P:Docs.Excel.ExcelCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the ExcelCell with the specified ExcelRow index and ExcelColumn index.
            </summary>
            <param name="RowIndex">The  zero-based index of ExcelRow.</param>
            <param name="ColumnIndex">The  zero-based index of ExcelColumn.</param>
            <returns>The ExcelCell at the specified index of the ExcelCellCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellCollection.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the ExcelCell with the specified indexes.
            </summary>
            <param name="TopLeftRowIndex">The  zero-based index of TopLeftRow.</param>
            <param name="TopLeftColumnIndex">The  zero-based index of TopLeftColumn.</param>
            <param name="BottomRightRowIndex">The  zero-based index of BottomRightRow.</param>
            <param name="BottomRightColumnIndex">The  zero-based index ofBottomRightColumn.</param>
            <returns>The ExcelCell at the specified indexes of the ExcelCellCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellCollection.Item(System.String)">
            <summary>
            Gets the ExcelCell with the specified name.
            </summary>
            <param name="Index">The specified name of ExcelCell.</param>
            <returns>The ExcelCell at the specified index of the ExcelCellCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellCollection.Height">
            <summary>
            Gets a height of ExcelCellCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellCollection.Width">
            <summary>
            Gets a width of ExcelCellCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellStyle">
            <summary>
            Contains settings specifying how the ExcelCell data will be displayed.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellStyle.#ctor(Docs.Excel.BasicExcelCell[])">
            <summary>
            Initializes a new instance of class ExcelCellStyle.
            </summary>
            <param name="ExcelCells">Range of BasicExcelCell.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellStyle.#ctor(Docs.Excel.BasicExcelCellStyle)">
            <summary>
            Initializes a new instance of class ExcelCellStyle. Use for create style of ExcelRow or ExcelColumn.
            </summary>
            <param name="Style">The prototip style.</param>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.BasicStyle">
            <summary>
            Gets or sets a style.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:Docs.Excel.ExcelCellBorder"/>).
            <remarks>It's recomended to use <see cref="M:Docs.Excel.ExcelCell.SetBordersStyles(Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color)"/> and  <see cref="M:Docs.Excel.ExcelCell.SetDiagonalStyle(Docs.Excel.TypeOfDiagonal,Docs.Excel.TypeOfBorderLine,System.Drawing.Color)"/>.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Font">
            <summary>
            Gets or sets ExcelCellFont related settings (<see cref="T:Docs.Excel.ExcelCellFont"/>). 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.HorizontalAlignment">
            <summary>
            Gets or sets a horizontal alignment. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.VerticalAlignment">
            <summary>
            Gets or set a vertical alignment. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Locked">
            <summary>
            Gets of sets if the ExcelCell is locked.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.StringFormat">
            <summary>
            Gets or sets a format string that will be used to interpret and display ExcelCell value.
            <remarks>Use predefined formats <see cref="T:Docs.Excel.DefinedFormats"/> to quick set format string.
            For more information on number format strings consult Microsoft Excel documentation.
            </remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.CellDataFormat">
            <summary>
            Gets a type of cell data format.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Rotation">
            <summary>
            Gets or sets ExcelCell data rotation. Value must be between -90 and 90.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.IsVerticalText">
            <summary>
            Gets of sets whether the ExcelCell text is displayed in a vertical style.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.WrapText">
            <summary>
            Gets or sets if the text is Wrapped.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Hidden">
            <summary>
            Gets of sets if the ExcelCell is hidden.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.Indent">
            <summary>
            Gets cell data indentation(px).     
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.PatternFillStyle">
            <summary>
            Gets or sets fill pattern.
            <remarks>It's recomended to use <see cref="M:Docs.Excel.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,Docs.Excel.TypeOfFillPattern)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.PatternForeColor">
            <summary>
            Gets or sets fill pattern foreground color.
            <remarks>It's recomended to use <see cref="M:Docs.Excel.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,Docs.Excel.TypeOfFillPattern)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.BackgroundColor">
            <summary>
            Gets or sets background color. There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.
            <remarks>It's recomended to use <see cref="M:Docs.Excel.ExcelCell.SetFillColorOfCell(System.Drawing.Color)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellStyle.IsDefaultStyle">
            <summary>
            Returns true if cell style is default; otherwise, false.
            </summary>
        </member>
        <member name="T:Docs.Excel.ARRAY">
            <summary>
            Array record (0x0221) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.ARRAY.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class ARRAY.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ARRAY record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.BasicProperties">
            <summary>
            Base class for Excel Cell type records. To keep are information about XF index, column number and row number.
            </summary>
        </member>
        <member name="M:Docs.Excel.BasicProperties.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class BasicProperties.
            </summary>
        </member>
        <member name="T:Docs.Excel.BLANK">
            <summary>
            Blank record (0x0201) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.BLANK.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class BLANK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BLANK record.</param>
            <exception>
            An Exception if thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.BOOLERR">
            <summary>
            Boolerr record (0x0205) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.BOOLERR.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class RowTable.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BOOLERR record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.Dimension">
            <summary>
            Dimension record (0x0200) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.Dimension.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Dimension record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.Dimension.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="FirstRow">Number of first ExcelRow.</param>
            <param name="LastRow">Number of last ExcelRow.</param>
            <param name="FirstColumn">Number of first ExcelColumn.</param>
            <param name="LastColumn">Number of last ExcelColumn.</param>
        </member>
        <member name="M:Docs.Excel.Dimension.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="Worksheet">ExcelWorksheet on the basis of which creates an instance of the class Dimension.</param>
        </member>
        <member name="T:Docs.Excel.ErrorType">
            <summary>
            Class that abstracts a boolean or error Excel value.
            </summary>
        </member>
        <member name="M:Docs.Excel.ErrorType.GetTypeError(System.Byte,System.Byte)">
            <summary>
            Returns the error string using error value.
            </summary>
            <param name="Error">The value to read.</param>
            <param name="FlagErrBool">Error indicator. </param>
        </member>
        <member name="T:Docs.Excel.FORMULA">
            <summary>
            Formula record (0x006) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.FORMULA.#ctor(Docs.Excel.GenericBiff,System.IO.Stream)">
            <summary>
            Initializes a new instance of class FORMULA.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the FORMULA record.</param>
            <param name="DataStream">The stream into the records to which the FORMULA record belongs to. The record stream must be positioned just after the FORMULA record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.FORMULA.ValidValue(System.Double,System.IO.Stream)">
            <summary>
            Read the result of formula value
            </summary>
        </member>
        <member name="T:Docs.Excel.LABEL">
            <summary>
            Using for old version.
            Label record (0x0204) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.LABEL.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class LABEL.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the LABEL record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.LABELSST">
            <summary>
            LabelSST record (0x00fd) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.LABELSST.#ctor(Docs.Excel.GenericBiff,Docs.Excel.SST)">
            <summary>
            Initializes a new instance of class LABELSST.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the LABELSST record.</param>
            <param name="Sst">A reference to the shared string table for the workbook.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.MULBLANK">
            <summary>
            This class abstracts the MULBLANK (0x00be) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.MULBLANK.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class MULBLANK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MULBLANK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.MULRK">
            <summary>
            MULRK record (0x00bd) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.MULRK.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class MULRK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MULRK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.NUMBER">
            <summary>
            Number record (0x0203) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.NUMBER.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class NUMBER.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the NUMBER record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.RK">
            <summary>
            RK record (0x027e) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.RK.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class RK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the RK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.RKREC">
            <summary>
            Structure that represents a formatted RK value.
            </summary>
        </member>
        <member name="M:Docs.Excel.RKREC.#ctor(System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of class RKREC.
            </summary>
            <param name="xf">The index in the format table for the RK value.</param>
            <param name="rk">The RK value.</param>
        </member>
        <member name="T:Docs.Excel.RkValue">
            <summary>
            Structure that represents the value of an RK record.
            </summary>
        </member>
        <member name="M:Docs.Excel.RkValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class RK value.
            </summary>
            <param name="rk">The raw RK value to interpret.</param>
        </member>
        <member name="M:Docs.Excel.RkValue.ToDouble(System.Int32)">
            <summary>
            Converts a specified value to a double-precision floating-point number.
            </summary>
            <param name="n">The signed integer to convert.</param>
            <returns>A double-precision floating-point number.</returns>
        </member>
        <member name="T:Docs.Excel.RSTRING">
            <summary>
            Using for old  version.
            RSTRING record (0x00D6) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.RSTRING.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class RSTRING.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the RSTRING record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.SHRFMLA">
            <summary>
            SHRFMLA record (0x00bc) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.SHRFMLA.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class SHRFMLA.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the SHRFMLA record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.StringRecord">
            <summary>
            Using for old version.
            String record (0x0207) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.StringRecord.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class StringRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the String record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.STRUN">
            <summary>
            Using for old version.
            STRUN contains information about string format.
            </summary>
        </member>
        <member name="T:Docs.Excel.MergeredExcelCellsCollection">
            <summary>
            This record (0x00E5) contains the addersses of merged cell ranges in the cureent sheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.MergeredExcelCellsCollection.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class MergeredCellsTable.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MergeredCellsTable record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.MergeredExcelCellsCollection.#ctor">
            <summary>
            Initializes a new instance of the MergeredCellsTable class that is empty.
            </summary>
        </member>
        <member name="M:Docs.Excel.MergeredExcelCellsCollection.AddMERGEDCELLS(Docs.Excel.MergedExcelCells)">
            <summary>
            Adds the specified MergeredCells in the end of the table.
            </summary>
            <param name="MegeredCell">The Style to be added to the end of the MergeredCellsTable.</param>
        </member>
        <member name="P:Docs.Excel.MergeredExcelCellsCollection.Item(System.Int32)">
            <summary>
            Gets the MergeredCellsTable with the specified index.
            </summary>
            <param name="Index">The zero-based index of the MergeredCellsTable.</param>
            <returns>The MergeredCells at the specified index of the MergeredCellsTable.</returns>
        </member>
        <member name="P:Docs.Excel.MergeredExcelCellsCollection.Count">
            <summary>
            Gets the number of MergedExcelCells contained in the MergeredExcelCellsCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.DefinedStyleCollection">
            <summary>
            Table of DefinedStyle records.
            </summary>
        </member>
        <member name="M:Docs.Excel.DefinedStyleCollection.#ctor">
            <summary>
            Initializes a new instance of the DefinedStyleCollection class that is empty.
            </summary>
        </member>
        <member name="M:Docs.Excel.DefinedStyleCollection.AddStyle(Docs.Excel.DefinedStyle)">
            <summary>
            Adds the specified DefinedStyle in the DefinedStyleCollection.
            </summary>
            <param name="NewStyle">The Style to be added to the DefinedStyleCollection.</param>
        </member>
        <member name="P:Docs.Excel.DefinedStyleCollection.Item(System.Int32)">
            <summary>
            Gets the DefinedStyle with the specified index.
            </summary>
            <param name="index">The zero-based index of the DefinedStyleCollection.</param>
            <returns>The Style at the specified index of the DefinedStyleCollection.</returns>
        </member>
        <member name="P:Docs.Excel.DefinedStyleCollection.Count">
            <summary>
            Gets the number of elements contained in the DefinedStyleCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.ColorPalette">
            <summary>
            This class contains the definition of all user-defined colours available for ExcelCell.
            </summary>
        </member>
        <member name="M:Docs.Excel.ColorPalette.InitPalette">
            <summary>
            Initializes a new instance of class ColorPalette.
            </summary>.
        </member>
        <member name="M:Docs.Excel.ColorPalette.GetColor(System.Int16)">
            <summary>
            Returns color with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ColorPalette.</param>
            <returns>The specified color.</returns>
        </member>
        <member name="M:Docs.Excel.ColorPalette.GetIdColor(System.Drawing.Color)">
            <summary>
            Returns Id of the specified Color from color palette.
            </summary>
            <param name="UserColor">The specified Color</param>
            <returns>Index of the specified Color.</returns>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Black">
            <summary>
            Gets Black color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.White">
            <summary>
            Gets White color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Red">
            <summary>
            Gets Red color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.BrightGreen">
            <summary>
            Gets BrightGreen color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Blue">
            <summary>
            Gets Blue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Yellow">
            <summary>
            Gets Yellow color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Magenta">
            <summary>
            Gets Magenta color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Turquoise">
            <summary>
            Gets Turquoise color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkRed">
            <summary>
            Gets DarkRed color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Green">
            <summary>
            Gets Green color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkBlue">
            <summary>
            Gets DarkBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkYellow">
            <summary>
            Gets DarkYellow color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Violet">
            <summary>
            Gets Violet color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Teal">
            <summary>
            Gets Teal color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Gray25">
            <summary>
            Gets Gray25 color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Gray50">
            <summary>
            Gets Gray50 color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Periwinkle">
            <summary>
            Gets Periwinkle color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.PlumPlus">
            <summary>
            Gets PlumPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Ivory">
            <summary>
            Gets Ivory color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LiteTurquoise">
            <summary>
            Gets LiteTurquoise color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkPurple">
            <summary>
            Gets DarkPurple color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Coral">
            <summary>
            Gets Coral color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.OceanBlue">
            <summary>
            Gets OceanBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.IceBlue">
            <summary>
            Gets IceBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkBluePlus">
            <summary>
            Gets DarkBluePlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.PinkPlus">
            <summary>
            Gets PinkPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.YellowPlus">
            <summary>
            Gets YellowPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.TurquoisePlus">
            <summary>
            Gets TurquoisePlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.VioletPlus">
            <summary>
            Gets VioletPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkRedPlus">
            <summary>
            Gets DarkRedPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.TealPlus">
            <summary>
            Gets TealPlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.BluePlus">
            <summary>
            Gets BluePlus color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.SkyBlue">
            <summary>
            Gets SkyBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LightTurquoise">
            <summary>
            Gets LightTurquoise color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LightGreen">
            <summary>
            Gets LightGreen color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LightYellow">
            <summary>
            Gets LightYellow color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.PaleBlue">
            <summary>
            Gets PaleBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Rose">
            <summary>
            Gets Rose color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Lavender">
            <summary>
            Gets Lavender color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Tan">
            <summary>
            Gets Tan color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LightBlue">
            <summary>
            Gets LightBlue color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Aqua">
            <summary>
            Gets Aqua color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Lime">
            <summary>
            Gets Lime color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Gold">
            <summary>
            Gets Gold color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.LightOrange">
            <summary>
            Gets LightOrange color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Orange">
            <summary>
            Gets Orange color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.BlueGray">
            <summary>
            Gets BlueGray color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Gray40">
            <summary>
            Gets Gray40 color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkTeal">
            <summary>
            Gets DarkTeal color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.SeaGreen">
            <summary>
            Gets SeaGreen color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.DarkGreen">
            <summary>
            Gets DarkGreen color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.OliveGreen">
            <summary>
            Gets OliveGreen color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Brown">
            <summary>
            Gets Brown color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Plum">
            <summary>
            Gets Plum color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Indigo">
            <summary>
            Gets Indigo color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.Gray80">
            <summary>
            Gets Gray80 color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_ActiveBorder">
            <summary>
            Gets a system-defined color of the active window's border.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_Window">
            <summary>
            Gets a system-defined color of the background in the client area of a window.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_WindowFrame">
            <summary>
            Gets a system-defined color of a window frame.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_ControlText">
            <summary>
            Gets a system-defined color of text in a 3-D element.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_Control">
            <summary>
            Gets a system-defined face color of a 3-D element.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_Black">
            <summary>
            Gets a system-defined Black color.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_Info">
            <summary>
            Gets a system-defined color of the background of a ToolTip.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_InfoText">
            <summary>
            Gets a system-defined color of the text of a ToolTip.
            </summary>
        </member>
        <member name="P:Docs.Excel.ColorPalette.KnownColor_WindowText">
            <summary>
            Gets a system-defined color of the text in the client area of a window.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelColumn">
            <summary>
            ExcelColumn contains the properties of a single column and column cells.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelColumn.#ctor(System.Int32,Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelColumn.
            </summary>
            <param name="ColumnIndex">ExcelColumn number.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelColumn.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumn.Autofit">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelColumn.ColumnIndexToName(System.Int32)">
            <summary>
            Converts ExcelColumn index (1, 2, 3, ...) to ExcelColumn name ("A", "B", "C", ...).
            </summary>
            <param name="Index">ExcelColumn index.</param>
            <returns>ExcelColumn name.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelColumn.ColumNameToIndex(System.String)">
            <summary>
            Converts ExcelColumn name ("A", "B", ...) to ExcelColumn index (0, 1, ...). 
            </summary>
            <param name="Name">ExcelColumn name.</param>
            <returns>ExcelColumn index.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelColumn.Index">
            <summary>
            Gets the zero-base index of ExcelColumn.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelColumn.Width">
            <summary>
            Gets or sets ExcelColumn Width(pixels).
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelColumn.Hidden">
            <summary>
            Gets or sets whether the column is hidden.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelColumn.Cells">
            <summary>
            Gets cell range (<see cref="T:Docs.Excel.ExcelCellRange"/>) of the ExcelColumn.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelColumn.Style">
            <summary>
            Gets a style of this ExcelColumn.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelColumnCollection">
            <summary>
            Collection of Excel column (<see cref="T:Docs.Excel.ExcelColumn"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelColumnCollection.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelColumnCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelColumnCollection.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumnCollection.GetSimpleIndex(System.String)">
            <summary>
            Converts the specified string address of ExcelColumn to integer index value.
            </summary>
            <param name="address">The specified string address.</param>
            <returns>Integer index value.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelColumnCollection.Remove(System.Int32)">
            <summary>
            Removes the column with the specified index.
            </summary>
            <param name="Index">The zero-based index at which column should be removed.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumnCollection.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Moves the column including its data and properties.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="ColumnPosition">New position of the column.</param>
        </member>
        <member name="M:Docs.Excel.ExcelColumnCollection.Insert(System.Int32)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="Index">The zero-based index at which column should be inserted.</param>
        </member>
        <member name="P:Docs.Excel.ExcelColumnCollection.Item(System.Int32)">
            <summary>
            Gets the ExcelColumn with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ExcelColumnCollection.</param>
            <returns>The ExcelColumn at the specified index of the ExcelColumnCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelColumnCollection.Item(System.String)">
            <summary>
            Gets the ExcelColumn with the specified name.
            </summary>
            <param name="Address">The name of the ExcelColumn in the ExcelColumnCollection.</param>
            <returns>The ExcelColumn at the specified name of the ExcelColumnCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelColumnCollection.Count">
            <summary>
            Gets index of last ExcelColumn in this ExcelWorksheet. 
            </summary>
        </member>
        <member name="T:Docs.Excel.ContinueRecord">
            <summary>
            This class is a ContinueRecord (0x003c) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.ContinueRecord.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class ContinueRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ContinueRecord.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.ContinueRecord.GetDataStream">
            <summary>
            Method for getting a stream for the data in the ContinueRecord.
            </summary>
            <returns>Returns a Stream for the data in the ContinueRecord.</returns>
        </member>
        <member name="M:Docs.Excel.ContinueRecord.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:Docs.Excel.DateMode">
            <summary>
            This record specifies the base date for displaying date values.
            The value = 1 then Use 1904 base date
            </summary>
        </member>
        <member name="M:Docs.Excel.DateMode.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class DateMode.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating DateMode.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.DateMode.#ctor">
            <summary>
            Initializes a new instance of class DateMode with standard properties.
            </summary>
        </member>
        <member name="T:Docs.Excel.DBCell">
            <summary>
            This record is written once in a ExcelRow Block. It contains relative offset to calculate the stream position
            of the first cell record for earch ExcelRow. The ArrayOffsets in this record contains as many offsets as ExcelRow
            records are presetn in the ExcelRow Block.
            </summary>
        </member>
        <member name="M:Docs.Excel.DBCell.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class DBCell.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the DBCell record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.DBCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class DBCell.
            </summary>
            <param name="NumDBCellBlocks">Number of blocks of DBCell.</param>
        </member>
        <member name="T:Docs.Excel.DBCellCollection">
            <summary>
            Table of DBCell records.
            </summary>
        </member>
        <member name="M:Docs.Excel.DBCellCollection.#ctor">
            <summary>
            Initializes a new instance of class DBCellCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel.DBCellCollection.AddDBCell(Docs.Excel.DBCell)">
            <summary>
            Adds the specified DBCell in the end of the DBCellCollection.
            </summary>
            <param name="NewDBCell">The DBCell to be added to the end of the DBCellCollection.</param>
        </member>
        <member name="M:Docs.Excel.DBCellCollection.Clear">
            <summary>
            Removes all elements of the DBCellCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.DBCellCollection.Item(System.Int32)">
            <summary>
            Gets the DBCell with the specified index.
            </summary>
            <param name="Index">The zero-based index of the DBCellCollection.</param>
            <returns>The DBCell at the specified index of the DBCellCollection.</returns>
        </member>
        <member name="P:Docs.Excel.DBCellCollection.Count">
            <summary>
            Gets the number of elements contained in the DBCellCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.BasicExcelCell">
            <summary>
            ExcelCell provides access to a single cell.
            </summary>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the ExcelCell class that is empty.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.#ctor(Docs.Excel.XF,System.Object,Docs.Excel.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the class ExcelCell.
            </summary>
            <param name="Xf">Xf-record of created ExcelCell.</param>
            <param name="Value">Value of created ExcelCell.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
            <param name="RowIndex">Number of ExcelRow.</param>
            <param name="ColumnIndex">Number of ExcelColumn.</param>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.#ctor(Docs.Excel.BasicExcelCellStyle,Docs.Excel.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the class ExcelCell.
            </summary>
            <param name="Style">BasicExcelCellStyle for created ExcelCell.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
            <param name="RowIndex">Number of ExcelRow</param>
            <param name="ColumnIndex">Number of ExcelColumn.</param>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.ValueWithFormat">
            <summary>
            Returns string value of ExcelCell according its string format.
            </summary>
            <returns>String value of ExcelCell.</returns>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.DecimalToIndicatedDivision(System.Decimal,System.String,System.Int32@)">
            <summary>
            Translates value from decimal to indicated division.
            </summary>
            <param name="num">Decimal value.</param>
            <param name="format">String format.</param>
            <param name="FractPosition">Position of fraction.</param>
            <returns>Fraction as a string.</returns>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.DateToString(System.Decimal,System.String)">
            <summary>
            Converts the value of the current DateTime object to its equivalent string representation using the specified format.
            </summary>
            <param name="num">DateTime value in Excel format.</param>
            <param name="format">The format string DateTime.</param>
            <returns>A string representation of value of the current DateTime object as specified by format.</returns>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.FindConnection">
            <summary>
            Finds ExcelCell that are involved in the formula.
            </summary>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.ReCountFormula">
            <summary>
            Recalculates the formula.
            </summary>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.IsReversibleReferens">
            <summary>
            Checks whether there are cyclic references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.IsUsedInCell(Docs.Excel.BasicExcelCell)">
            <summary>
            Checks whether the ExcelCell involved in the formulas.
            </summary>
            <param name="Cell">ExcelCell to be checked.</param>
            <returns>Returns true if the ExcelCell is involved in formulas, else - false.</returns>
        </member>
        <member name="M:Docs.Excel.BasicExcelCell.IsUsingCell(Docs.Excel.BasicExcelCell)">
            <summary>
            Checks used whether other ExcelCell in the formula, which is stored in the ExcelCell.
            </summary>
            <param name="Cell">ExcelCell which contains the formula.</param>
            <returns>Returns true if the formula involving other ExcelCell.</returns>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.RPN">
            <summary>
            Gets or sets Reverse-Polish Notation.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.CellIndex">
            <summary>
            Gets ExcelCell address (ExcelRow index, ExcelColumn index, ExcelWorksheet index).
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.CellType">
            <summary>
            Gets or sets a type of ExcelCell.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.FormulaString">
            <summary>
            Gets cell formula string.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.Hyperlink">
            <summary>
            Gets or sets a Hyperlink of ExcelCell (<see cref="T:Docs.Excel.ExcelCellHyperlink"/>) of this cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.IsEmpty">
            <summary>
            Return true if ExcelCell is blank; Otherwise false.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.IsFormula">
            <summary>
            Checks whether the ExcelCell stores a formula. Return true if the ExcelCell stores a formula.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.IsMerged">
            <summary>
            Gets or sets a merged cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.IsTopLeftCell">
            <summary>
            Returns true if the cell is the upper left in the merged; otherwise false.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.Style">
            <summary>
            Gets or sets a style of ExcelCell (<see cref="T:Docs.Excel.ExcelCellStyle"/>) of this cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.BasicExcelCell.Value">
            <summary>
            Gets or sets value of ExcelCell.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCell">
            <summary>
            ExcelCell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCell.#ctor(Docs.Excel.ExcelWorksheet,System.Collections.Generic.List{Docs.Excel.BasicExcelCell})">
            <summary>
            Initializes a new instance of class ExcelCellTable.
            </summary>
            <param name="Cells">Array of are cells.</param>
            /// <param name="WSheet">Worksheet which belong cell.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.SetBordersStyles(Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color,Docs.Excel.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell border lines.
            </summary>
            <param name="TopLineStyle">The style of the top border line.</param>
            <param name="TopLineColor">The color of the top border line.</param>
            <param name="BottomLineStyle">The style of the bottom border line.</param>
            <param name="BottomLineColor">The color of the bottom border line.</param>
            <param name="LeftLineStyle">The style of the left border line.</param>
            <param name="LeftLineColor">The color of the left border line.</param>
            <param name="RightLineStyle">The style of the right border line.</param>
            <param name="RightLineColor">The color of the right border line.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.SetBordersStyles(Docs.Excel.TypeOfMultipleBorders,Docs.Excel.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell border lines.
            </summary>
            <param name="MultipleBorders">Borders to set.</param>
            <param name="LineStyle">The style of the border line.</param>
            <param name="LineColor">The color of the border line.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.SetDiagonalStyle(Docs.Excel.TypeOfDiagonal,Docs.Excel.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell diagonal line(s).
            </summary>
            <param name="Diagonal">The type of the diagonal line.</param>
            <param name="DiagonalLineStyle">The style of the diagonal line.</param>
            <param name="DiagonalLineColor">The color of the diagonal line.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,Docs.Excel.TypeOfFillPattern)">
            <summary>
            Sets the fill color of ExcelCell.
            </summary>
            <param name="BackGroundColor">The color of background.</param>
            <param name="PatternForeColor">The color of pattern foreground.</param>
            <param name="PatternFillStyle">The style of fill pattern foreground.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.SetFillColorOfCell(System.Drawing.Color)">
            <summary>
            Sets the fill color of ExcelCell.
            </summary>
            <param name="BackGroundColor">The colors of background.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCell.ValueWithFormat">
            <summary>
            Returns string value of ExcelCell according its string format.
            </summary>
            <returns>String value of ExcelCell.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCell.DefinedName">
            <summary>
            Gets or sets the user defined name of this cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.Value">
            <summary>
            Gets or sets value of ExcelCell.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.RichString">
            <summary>
            Gets or sets rich text.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.Hyperlink">
            <summary>
            Gets or sets a Hyperlink.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.FormulaString">
            <summary>
            Gets cell formula string.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.RPN">
            <summary>
            Gets or sets Reverse-Polish Notation.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.Style">
            <summary>
            Gets a style of ExcelCell (<see cref="T:Docs.Excel.ExcelCellStyle"/>) of this cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.IsMerged">
            <summary>
            Gets or sets a merged cell.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.IsEmpty">
            <summary>
            Returns true if this cell have type a blank.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.FirstRowIndex">
            <summary>
            Gets the index of the row top-left cell in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.FirstColumIndex">
            <summary>
            Gets the index of the column top-left cell in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.LastRowIndex">
            <summary>
            Gets the index of the row rigth-cell in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.LastColumIndex">
            <summary>
            Gets the index of the column rigth-cell in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.Height">
            <summary>
            Gets a number of row in range.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCell.Width">
            <summary>
            Gets a number of column in range.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellFontCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.ExcelCellFont"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellFontCollection.#ctor">
            <summary>
            Initializes a new instance of class ExcelFontCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellFontCollection.AddXmlFonts(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="XmlFontCollection"></param>
        </member>
        <member name="P:Docs.Excel.ExcelCellFontCollection.Count">
            <summary>
            Gets the number of elements contained in the ExcelFontCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFontCollection.Keys">
            <summary>
            Gets a collection containinig the key in the ExcelFontCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.Format">
            <summary>
            This record contains information about a value Format.
            </summary>
        </member>
        <member name="M:Docs.Excel.Format.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Format.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Format record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.Format.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of class Format.
            </summary>
            <param name="FormatStr">Format string.</param>
            <param name="Index">Index of format.</param>
        </member>
        <member name="T:Docs.Excel.FormatCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.Format"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.FormatCollection.#ctor">
            <summary>
            Initializes a new instance of class FormatCollection.
            </summary>
        </member>
        <member name="M:Docs.Excel.FormatCollection.InitStandartFormatTable">
            <summary>
            Initializes a table of standart Formats.
            </summary>
        </member>
        <member name="M:Docs.Excel.FormatCollection.AddFormat(Docs.Excel.Format)">
            <summary>
            Adds the specified Format in the FormatCollection.
            </summary>
            <param name="NewFormat">The Format to be added to the FormatCollection.</param>
        </member>
        <member name="M:Docs.Excel.FormatCollection.GetFormatIndex(System.String)">
            <summary>
            Returns (the zero-based) index of the first occurrence of the specified Format in a FormatCollection.
            </summary>
            <param name="format">The Format to locate in the FormatCollection.</param>
            <returns>The zero-based index of the first occurrence of the Format parameter, if Format is found in the FormatCollection.</returns>
        </member>
        <member name="M:Docs.Excel.FormatCollection.GetFormatString(System.Int16)">
            <summary>
            Returns Format from FormatCollection with the specified index.
            </summary>
            <param name="Index">The zero-based index.</param>
            <returns>The Format at the specified index of the FormatCollection.</returns>
        </member>
        <member name="M:Docs.Excel.FormatCollection.IsContainFormat(System.String)">
            <summary>
            Determines whether FormatCollection contains a specific format.
            </summary>
            <param name="format"></param>
            <returns>True if the FormatCollection object contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="P:Docs.Excel.FormatCollection.Item(System.Int32)">
            <summary>
            Gets the Format with the specified index.
            </summary>
            <param name="Key">The zero-based index of the FormatCollection.</param>
            <returns>The Format at the specified index of the FormatCollection.</returns>
        </member>
        <member name="P:Docs.Excel.FormatCollection.Count">
            <summary>
            Gets the number of elements contained in the FormatCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.FormatCollection.MaxIndex">
            <summary>
            Gets the maximum index of format.
            </summary>
        </member>
        <member name="P:Docs.Excel.FormatCollection.Keys">
            <summary>
            Gets a collection containinig the key in the FormatCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.HyperlinkOptions">
            <summary>
            This class decodes the hyperlink options field
            </summary>
        </member>
        <member name="M:Docs.Excel.HyperlinkOptions.#ctor(System.UInt32)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="Options">The options flag as taken from the HLINK record</param>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasFileLinkOrUrl">
            <summary>
            Returns true if the HLINK record contains a file or url link
            </summary>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasRelativeFilePath">
            <summary>
            Returns true if the link is a relative file path
            </summary>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasDescription">
            <summary>
            Returns true if the HLINK record contains a description
            </summary>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasTextMark">
            <summary>
            Returns true if the HLINK record contains a text mark
            </summary>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasTargetFrame">
            <summary>
            Returns true if the HLINK record contains a target frame
            </summary>
        </member>
        <member name="P:Docs.Excel.HyperlinkOptions.HasUNCPath">
            <summary>
            Returns true if the HLINK record contains a UNC path
            </summary>
        </member>
        <member name="T:Docs.Excel.HyperlinkRecord">
            <summary>
            HLINK record (0x01B8) from Excel streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.HyperlinkRecord.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class HyperLinkRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the HLINK record.</param>
            <exception>
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.HyperlinkRecord.CompareArrays(System.Byte[],System.Byte[])">
            <summary>
            Compares two specified array objects.
            </summary>
            <param name="L">The first array.</param>
            <param name="R">The second array.</param>
            <returns>Returns true if the arrays are equal, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.HyperlinkRecord.IsUrlMoniker(System.Byte[])">
            <summary>
            Checks whether the specified object is an instance of class UrlMoniker.
            </summary>
            <param name="Moniker">Object to be checked.</param>
            <returns>True, if the object is an instance of UrlMoniker, otherwise false.</returns>
        </member>
        <member name="M:Docs.Excel.HyperlinkRecord.IsFileMoniker(System.Byte[])">
            <summary>
            Checks whether the specified object is an instance of class FileMoniker.
            </summary>
            <param name="Moniker">Object to be checked.</param>
            <returns>True, if the object is an instance of FileMoniker, otherwise false.</returns>
        </member>
        <member name="T:Docs.Excel.Index">
            <summary>
            This record stores the range of used rows and stream position of several records of the current ExcelWorkSheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.Index.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Index.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data of the Index record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.Index.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class Index.
            </summary>
            <param name="Firstrow">Index to first used ExcelRow(0-based).</param>
            <param name="Lastrow">Index to last used ExcelRow + 1(0-based).</param>
            <param name="NumberDBCell">Number of blocks of DBCell.</param>
        </member>
        <member name="T:Docs.Excel.RichTextFormat">
            <summary>
            This class stores rich text formatting for a single string in the Shared String Table.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelRow">
            <summary>
            ExcelRow contains the properties of a single row and row cells.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelRow.#ctor(System.Int32,Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelRow. Creates an empty ExcelRow.
            </summary>
            <param name="RowIndex">The number of created ExcelRow.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRow.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRow.#ctor(Docs.Excel.GenericBiff,Docs.Excel.ExcelWorksheet,Docs.Excel.XFCollection)">
            <summary>
            Initializes a new instance of class ExcelRow.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data of ExcelRow record.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRow.</param>
            <param name="XfCollection">Collection of XF.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.ExcelRow.Autofit">
            <summary>
            Automatically fits row height to the minimum size required for all lines in the row cells to be visible.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelRow.GetCells">
            <summary>
            Returns all existent ExcelCell from ExcelRow.
            </summary>
            <returns>An array of all cells from row.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelRow.Index">
            <summary>
            Gets the zero-base index of ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.Height">
            <summary>
            Gets or sets ExcelRow height(px). 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.Hidden">
            <summary>
            Gets or sets the whether row is hidden.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.Cells">
            <summary>
            Gets cell range (<see cref="T:Docs.Excel.ExcelCellRange"/>) of the ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.Style">
            <summary>
            Gets or sets cell style (<see cref="T:Docs.Excel.ExcelCellStyle"/>) for contained cells.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.IsEmpty">
            <summary>
            Checks for an empty ExcelRow or not.
            </summary>
            <returns>True, if the ExcelRow an empty, otherwise false.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelRow.LastCellIndex">
            <summary>
            Gets a index of last ExcelCell in ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRow.FirstCellIndex">
            <summary>
            Gets a index of first ExcelCell in ExcelRow.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelRowCollection">
            <summary>
            Collection of excel row (<see cref="T:Docs.Excel.ExcelRow"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelRowCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRowCollection.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.Add(Docs.Excel.ExcelRow)">
            <summary>
            Adds the specified ExcelRow to the ExcelRowCollection.
            </summary>
            <param name="NewRow">The ExcelRow to be added to the ExcelRowCollection.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.FastRemoveRow(System.Int32)">
            <summary>
            Removes the ExcelRow with the specified number from the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based specified index of ExcelRow.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.Remove(System.Int32)">
            <summary>
            Removes the ExcelRow with the specified index from the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based specified index of ExcelRow.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.MoveRow(System.Int32,System.Int32)">
            <summary>
            Moves the row including its data and properties.
            </summary>
            <param name="RowIndex">Index of the row.</param>
            <param name="positionIndex">New position of the row.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.Insert(System.Int32)">
            <summary>
            Insert the ExcelRow with the specified index into the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based index at which value should be inserted.</param>
        </member>
        <member name="M:Docs.Excel.ExcelRowCollection.GetRows">
            <summary>
            Returns all existent ExcelRows from ExcelRowCollection.
            </summary>
            <returns>An array of all ExcelRow from ExcelRowCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.Item(System.Int32)">
            <summary>
            Gets the ExcelRow with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ExcelRowCollection</param>
            <returns>The ROW at the specified index of the ExcelRowCollection.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.Count">
            <summary>
            Gets the number of currently allocated elements (<see cref="T:Docs.Excel.ExcelRow"/>). 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.FirstRow">
            <summary>
            Returns number of first ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.LastRow">
            <summary>
            Returns number of last ExcelRow.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.FirstColumnIndex">
            <summary>
            Returns number of first ExcelColumn.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelRowCollection.LastColumnIndex">
            <summary>
            Returns number of last ExcelColumn.
            </summary>
        </member>
        <member name="T:Docs.Excel.RowOptionFlags">
            <summary>
            Option flags and default ExcelRow formatting.
            </summary>
        </member>
        <member name="M:Docs.Excel.RowOptionFlags.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the class RowOptionFlags.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Docs.Excel.RowOptionFlags.OutlineLevel">
            <summary>
            Determines the outline level.
            </summary>
        </member>
        <member name="P:Docs.Excel.RowOptionFlags.Collapsed">
            <summary>
            Determines if the ExcelRow is collapsed.
            </summary>
        </member>
        <member name="P:Docs.Excel.RowOptionFlags.ZeroHeight">
            <summary>
            Determines if the ExcelRow height is zero.
            </summary>
        </member>
        <member name="P:Docs.Excel.RowOptionFlags.Unsynced">
            <summary>
            Determines if the ExcelRow is unsynced.
            </summary>
        </member>
        <member name="P:Docs.Excel.RowOptionFlags.Formatted">
            <summary>
            Determines if a ExcelRow is formatted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Docs.Excel.SST">
            <summary>
            SST - Shared String Table.
            This record contains a list of all strings used anywhere in the workbook. Each string occurs only once.
            The workbook uses indexes into the list to reference the strings.
            </summary>
        </member>
        <member name="M:Docs.Excel.SST.#ctor(Docs.Excel.GenericBiff,System.IO.Stream,Docs.Excel.ExcelCellFontCollection,Docs.Excel.ExcelWorkbook)">
            <summary>
            Initializes a new instance of class SST.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the SST record.</param>
            <param name="DataStream">The stream into the records to which the SST record belongs to. The record stream must be positioned just after the SST record.</param>
            <param name="FontCollection">Collection of ExcelCellFont.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.SST.#ctor(Docs.Excel.ExcelWorkbook)">
            <summary>
            Initializes a new instance of the SST class that is empty.
            </summary>
        </member>
        <member name="M:Docs.Excel.SST.AddUserStrings(Docs.Excel.RichTextString)">
            <summary>
            Adds the specified string in the Shared String Table.
            </summary>
            <param name="UserString">The string to be added to the end of the collection.</param>
            <returns>Index of added string.</returns>
        </member>
        <member name="P:Docs.Excel.SST.Count">
            <summary>
            Gets the number of elements contained in the Shared String Table.
            </summary>
        </member>
        <member name="T:Docs.Excel.DefinedStyle">
            <summary>
            This record stores the name of a user-defined ExcelCell DefinedStyle or specific options for a built-in ExcelCell DefinedStyle. All DefinedStyle records
            occur together behind the XF record list. Each DefinedStyle record refers to a style XF record, which contains the
            formatting attributes for the ExcelCell DefinedStyle.
            </summary>
        </member>
        <member name="M:Docs.Excel.DefinedStyle.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class DefinedStyle.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating DefinedStyle.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.DefinedStyle.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:Docs.Excel.DefinedStyle.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfBorderLine">
            <summary>
            Represents the style of borderline of ExcelCell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Thin">
            <summary>
            Thin line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Medium">
            <summary>
            Medium line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Dashed">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Dotted">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Thick">
            <summary>
            Thick line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.Hair">
            <summary>
            Hair line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.MediumDashed">
            <summary>
            Medium dashed line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.MediumDashDot">
            <summary>
            Medium dash-dot line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot line.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBorderLine.SlantDashDot">
            <summary>
            Slanted dash-dot line.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfFillPattern">
            <summary>
            Represents the types of style of fill pattern foreground.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Solid">
            <summary>
            "Solid" fill pattern using foreground color.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Gray50">
            <summary>
            "50% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color.("Gray50" for .xls; "mediumGray" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Gray75">
            <summary>
            "75% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray75" for .xls; "darkGray" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Gray25">
            <summary>
            "25% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray25" for .xls; "lightGray" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.HorizontalStripe">
            <summary>
            "Horizontal Stripe" pattern. ("HorizontalStripe" for .xls; "darkHorizontal" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.VerticalStripe">
            <summary>
            "Vertical Stripe" pattern. ("VerticalStripe" for .xls; "darkVertical" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ReverseDiagonalStripe">
            <summary>
            "Reverse Diagonal Stripe" pattern. ("ReverseDiagonalStripe" for .xls; "darkDown" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.DiagonalStripe">
            <summary>
            "Diagonal Stripe" pattern. ("DiagonalStripe" for .xls; "darkUp" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.DiagonalCrosshatch">
            <summary>
            "Diagonal Crosshatch" pattern. ("DiagonalCrosshatch" for .xls; "darkGrid" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThickDiagonalCrosshatch">
            <summary>
            "Thick Diagonal Crosshatch" pattern. ("ThickDiagonalCrosshatch" for .xls; "darkTrellis" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinHorizontalStripe">
            <summary>
            "Thin Horizontal Stripe" pattern. ("ThinHorizontalStripe" for .xls; "lightHorizontal" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinVerticalStripe">
            <summary>
            "Thin Vertical Stripe" pattern. ("ThinVerticalStripe" for .xls; "lightVertical" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinReverseDiagonalStripe">
            <summary>
            "Thin Reverse Diagonal Stripe" pattern. ("ThinReverseDiagonalStripe" for .xls; "lightDown" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinDiagonalStripe">
            <summary>
            "Thin Diagonal Stripe" pattern. ("ThinDiagonalStripe" for .xls; "lightUp" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinHorizontalCrosshatch">
            <summary>
            "Thin Horizontal Crosshatch" pattern. ("ThinHorizontalCrosshatch" for .xls; "lightGrid" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.ThinDiagonalCrosshatch">
            <summary>
            "Thin Diagonal Crosshatch" pattern. ("ThinDiagonalCrosshatch" for .xls; "lightTrellis" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Gray12">
            <summary>
            "12% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray12" for .xls; "gray125" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.Gray6">
            <summary>
            "6% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray6" for .xls; "gray0625" for .xlsx)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientHorizontal">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientHorizontalRevers">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientHorizontalCenter">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color1 to color2 to Color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientVertical">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientVerticalRevers">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientVarticalCenter">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalUp">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalUpRevers">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalUpCenter">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalDown">
            <summary>
            Angle of the linear gradient - diagonal down. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalDownRevers">
            <summary>
            Angle of the linear gradient - diagonal down. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientDiagonalDownCenter">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientFromCornerTopLeft">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-left corner.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientFromCornerTopRight">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientFromCornerBottomLeft">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientFromCornerBottomRigth">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfFillPattern.GradientFromCenter">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the center corner.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfHAlignment">
            <summary>
            Represents the types of horizontal alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.General">
            <summary>
            Aligns data depending on the data type (text, number, etc.)
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Fill">
            <summary>
            Fill alignment repeats cell data to fill the whole ExcelCell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.CenterAcross">
            <summary>
            Centered across selection. Multiple cells can be selected but only one should
            have value for this alignment to have effect.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfHAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfUnderline">
            <summary>
            Represents the types of style underline.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfUnderline.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfUnderline.Single">
            <summary>
            Single underline. Underlines only ExcelCell data.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfUnderline.Double">
            <summary>
            Double underline. Underlines only ExcelCell data.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfUnderline.SingleAccounting">
            <summary>
            Single accounting underline. Underlines whole ExcelCell.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfUnderline.DoubleAccounting">
            <summary>
            Double accounting underline. Underlines whole ExcelCell.
            </summary>
        </member>
        <member name="T:Docs.Excel.TypeOfVAlignment">
            <summary>
            Represents the types of vertical alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfVAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfVAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfVAlignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfVAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfVAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:Docs.Excel.Window1">
            <summary>
            This record contains general settings for the document window and global workbook settings.
            </summary>
        </member>
        <member name="M:Docs.Excel.Window1.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Window1.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating Window1.</param>
        </member>
        <member name="M:Docs.Excel.Window1.#ctor">
            <summary>
            Initializes a new instance of the class Window1 with standard parameters.
            </summary>
        </member>
        <member name="T:Docs.Excel.Window2">
            <summary>
            This record contains additional settings for the window of a specific worksheet.
            </summary>
        </member>
        <member name="M:Docs.Excel.Window2.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of class Window2.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating Window2.</param>
        </member>
        <member name="M:Docs.Excel.Window2.#ctor(Docs.Excel.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the class Window2 with standard parameters.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelWorksheet">
            <summary>
            Excel worksheet is a table with additional properties, identified by an unique name.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.#ctor(System.String,Docs.Excel.ExcelWorkbook)">
            <summary>
            Initializes a new instance of class ExcelWorksheet.
            </summary>
            <param name="Name">The name of created ExcelWorksheet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.ReadFromDataTable(System.Data.DataTable)">
            <summary>
            Reads a specified <see cref="T:System.Data.DataTable"/> and create ExcelWorksheet.
            </summary>
            <param name="DTable">The specified DataTable.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.ReadFromDataTable(System.Int32,System.Int32,System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reads entire DataTable and adds it as a worksheet starting on the Row and Column index selected. 
            Allows you to select whether or not to use the DataTable.Column names as the first row
            Allows you to choose how the new sheet is named.  Either via the current selected worksheet or by the datatable name
            </summary>
            <param name="StartRowIndex">Index of the row you wish to start the datatable insert.</param>
            <param name="StartColumnIndex">Column of the row you wish to start the datatable insert.</param>
            <param name="DTable">Data.DataTable</param>
            <param name="namedColumns">Set true to use DataTable.Column names as the first row inserted.</param>
            <param name="namedDataTable">Set true to use the name of the datatable as the worksheet name, set false to add it as the name of the current worksheet selected.</param>
            <param name="parseValues">If true - imported values will be parsed; otherwise - values persist original types.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.WriteToDataTable(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="FirstRowIndex">The row index at which to start writing in DataTable.</param>
            <param name="FirstColumnIndex">The column index at which to start writing in DataTable.</param>
            <param name="LastRowIndex">The row index at which to end writing in DataTable.</param>
            <param name="LastColumnIndex">The column index at which to end writing in DataTable.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.WriteToDataTable(System.Int32,System.Int32)">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="FirstRowIndex">The row index at which to start writing in DataTable.</param>
            <param name="FirstColumnIndex">The column index at which to start writing in DataTable.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheet.WriteToDataTable">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <returns>DataTable exemplar.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Name">
            <summary>
            Gets or sets ExcelWorksheet name.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Cells">
            <summary>
            Gets collection of all ExcelCell (<see cref="T:Docs.Excel.ExcelCell"/>) in the ExcelWorksheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Rows">
            <summary>
            Gets collection of all ExcelRow (<see cref="T:Docs.Excel.ExcelRow"/>) in the ExcelWorksheet. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Columns">
            <summary>
            Gets collection of all ExcelColumn (<see cref="T:Docs.Excel.ExcelColumn"/>) in the ExcelWorksheet.  
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.DefaultColumnWidth">
            <summary>
            Gets or sets a default ExcelColumn width.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Header">
            <summary>
            Gets or sets default Header.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Footer">
            <summary>
            Gets or sets default Footer.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets collection of all horizontal page breaks (<see cref="T:Docs.Excel.HorizontalPageBreak"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets collection of all vertical page breaks (<see cref="T:Docs.Excel.VerticalPageBreak"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Pictures">
            <summary>
            Collection of pictures.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.ViewOptions">
            <summary>
            Excel worksheet view related options.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheet.Protection">
            <summary>
            This collection expresses the sheet protection options to enforce when the sheet is protected.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelWorksheetCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.ExcelWorksheet"/>).
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.#ctor(Docs.Excel.ExcelWorkbook)">
            <summary>
            Initializes a new instance of class WorksheetTable.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.Add(System.String)">
            <summary>
            Adds a new empty ExcelWorksheet to the ExcelWorkbook.
            </summary>
            <param name="Name">The Name of the new Worksheet.</param>
            <returns>An empty ExcelWorksheet.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.Add(Docs.Excel.ExcelWorksheet)">
            <summary>
            Adds a specified ExcelWorksheet to the ExcelWorkbook.
            </summary>
            <param name="NewWorksheet">The specified ExcelWorksheet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.GetIndex(System.String)">
            <summary>
            Gets zero-based index of the specified Worksheet.
            </summary>
            <param name="Name">The name of the specified Worksheet.</param>
            <returns>The zero-based index of the specified Worksheet.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.GetIndex(Docs.Excel.ExcelWorksheet)">
            <summary>
            Gets zero-based index of the specified Worksheet.
            </summary>
            <param name="Worksheet">The specified ExcelWorksheet.</param>
            <returns>The zero-based index of the specified ExcelWorksheet.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.Remove(System.Int32)">
            <summary>
            Removes the ExcelWorksheet with the specified index from the ExcelWorksheetCollection.
            </summary>
            <param name="Index">The zero-base index of the removing ExcelWorksheet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.Remove(System.String)">
            <summary>
            Removes the ExcelWorksheet with the specified name from the ExcelWorksheetCollection.
            </summary>
            <param name="Name">The name of the removing ExcelWorksheet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorksheetCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts a worksheet with the specified name at the specified index.
            </summary>
            <param name="Index">The zero-based index of the inserted worksheet.</param>
            <param name="Name">The name of the inserted worksheet.</param>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetCollection.Count">
            <summary>
            Gets the number of elements (<see cref="T:Docs.Excel.ExcelWorksheet"/>) contained in ExcelWorksheetCollection.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetCollection.Names">
            <summary>
            The names of all worksheets (<see cref="T:Docs.Excel.ExcelWorksheet"/>) in the ExcelWorkbook.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetCollection.Item(System.Int32)">
            <summary>
            Gets the Worksheet record with the specified index.
            </summary>
            <param name="Index">The zero-based index of the worksheet.</param>
            <returns>The Worksheet at the specified index of the table of worksheet.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelWorksheetCollection.Item(System.String)">
            <summary>
            Gets the Worksheet record with the specified name.
            </summary>
            <param name="Index">The name of the Worksheet.</param>
            <returns>The Worksheet at the specified name of the table of worksheet.</returns>
        </member>
        <member name="T:Docs.Excel.XF">
            <summary>
            This record contains formatting information for cells, rows, columns or styles.
            </summary>
        </member>
        <member name="M:Docs.Excel.XF.#ctor(Docs.Excel.GenericBiff,Docs.Excel.ExcelCellFontCollection,Docs.Excel.FormatCollection)">
            <summary>
            Initializes a new instance of class XF.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the XF record.</param>
            <param name="Fonts">A instance of class ExcelFontCollection.</param>
            <param name="Formats">A instance of class FormatCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="T:Docs.Excel.XFCollection">
            <summary>
            Collection of (<see cref="T:Docs.Excel.XF"/>) records.
            </summary>
        </member>
        <member name="M:Docs.Excel.XFCollection.#ctor">
            <summary>
            Initializes a new instance of the XFCollection class that is empty.
            </summary>
        </member>
        <member name="M:Docs.Excel.XFCollection.AddXF(Docs.Excel.XF)">
            <summary>
            Adds the specified XF in the end of the XFCollection.
            </summary>
            <param name="NewXF">The XF to be added to the end of the XFCollection.</param>
        </member>
        <member name="M:Docs.Excel.XFCollection.GetIndex(Docs.Excel.XF)">
            <summary>
            Returns (the zero-based) index of the first occurrence of the specified XFRecord in a XFCollection.
            </summary>
            <param name="Xf">The XFRecord to locate in the XFCollection.</param>
            <returns>Index (from zero) of the XFRecord, if string found in the XFCollection.
            Otherwise - a value of -1.</returns>
        </member>
        <member name="P:Docs.Excel.XFCollection.Item(System.Int32)">
            <summary>
            Gets the XF with the specified index.
            </summary>
            <param name="Index">The zero-based index of the XFCollection.</param>
            <returns>The XF at the specified index of the XFCollection.</returns>
        </member>
        <member name="P:Docs.Excel.XFCollection.Count">
            <summary>
            Gets the number of elements contained in the XFCollection.
            </summary>
        </member>
        <member name="T:Docs.Excel.FatTable">
            <summary>
            Create FatTable.
            </summary>
        </member>
        <member name="M:Docs.Excel.FatTable.#ctor">
            <summary>
            Create an empty fat table.
            </summary>
        </member>
        <member name="M:Docs.Excel.FatTable.#ctor(Docs.Excel.CompoundFile)">
            <summary>
            Reads the fat table.
            </summary>
            <param name="CompoundFile">Parent Compound File.</param>
        </member>
        <member name="M:Docs.Excel.FatTable.FindChain(System.Int32)">
            <summary>
            Find all items of sector chain.
            </summary>
            <param name="StartNumber"> First number of blocks chain in FAT table</param>
        </member>
        <member name="P:Docs.Excel.FatTable.Item(System.Int32)">
            <summary>
            Gets one block from FAT table with the specified index.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellFont">
            <summary>
            This class contains font related settings.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.#ctor(Docs.Excel.GenericBiff)">
            <summary>
            Initializes a new instance of the class ExcelCellFont.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ExcelCellFont record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.#ctor(Docs.Excel.ExcelCellFont)">
            <summary>
            Initializes a new instance of the class ExcelCellFont on base of an existing ExcelCellFont.
            </summary>
            <param name="Prototype">The existing ExcelCellFont from which the new ExcelCellFont is created.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.#ctor(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the class ExcelCellFont with size and color.
            </summary>
            <param name="Name">A string representation of the FontFamily for the new ExcelCellFont.</param>
            <param name="Size">Size of the new ExcelCellFont.</param>
            <param name="FontColor">Color of the new ExcelCellFont.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.#ctor(System.String,System.Int32,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,Docs.Excel.TypeOfScript,Docs.Excel.TypeOfUnderline)">
            <summary>
            Initializes a new instance of the class ExcelCellFont with its properties.
            </summary>
            <param name="Name">A string representation of the FontFamily for the new ExcelCellFont.</param>
            <param name="Size">Size of the new ExcelCellFont.</param>
            <param name="FontColor">Color of the new ExcelCellFont.</param>
            <param name="Bold">True if new ExcelCellFont is bold.</param>
            <param name="Italic">True if new ExcelCellFont is italic.</param>
            <param name="Strikeout">True if new ExcelCellFont is </param>
            <param name="Script">Type of script of the new ExcelCellFont.</param>
            <param name="Underline">Underlininig of the new ExcelCellFont.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.GetStream">
            <summary>
            Gets a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.op_Equality(Docs.Excel.ExcelCellFont,Docs.Excel.ExcelCellFont)">
            <summary>
            Equals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.op_Inequality(Docs.Excel.ExcelCellFont,Docs.Excel.ExcelCellFont)">
            <summary>
            UnEquals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current ExcelCellFont.
            </summary>
            <param name="obj">The Object to compare with the current ExcelCellFont.</param>
            <returns>True if the specified Object is equal to the current ExcelCellFont; otherwise, false.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelCellFont.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current ExcelCellFont.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Size">
            <summary>
            Gets or sets font size. Unit is point(pixel). 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Color">
            <summary>
            Gets or set font color.
            <remarks>There are predefined colors <see cref="T:Docs.Excel.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Bold">
            <summary>
            Gets or set whether the font is bold. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Italic">
            <summary>
            Gets or set whether the font is italic. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Strikeout">
            <summary>
            Gets or set whether the font is strickeout. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Name">
            <summary>
            Gets name of the font.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Superscript">
            <summary>
            Gets or sets whether the font is superscript.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Subscript">
            <summary>
            Gets or sets whether the font is subscript.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellFont.Underline">
            <summary>
            Gets or sets whether the font is underlininig. 
            </summary>
        </member>
        <member name="T:Docs.Excel.GenericBiff">
            <summary>
            This class abstracts a Generic Microsoft (MS) Binary Interchange File Format (BIFF) record.
            </summary>
        </member>
        <member name="M:Docs.Excel.GenericBiff.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of class GenericBiff.
            </summary>
            <param name="InputStream">The stream to read the record data from.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:Docs.Excel.GenericBiff.GetDataStream">
            <summary>
            Returns a stream for the data in the BIFF record.
            </summary>
            <returns>Returns a stream for the data in the BIFF record.</returns>
        </member>
        <member name="T:Docs.Excel.MiniFatTable">
            <summary>
            Create Mini FAT table.
            </summary>
        </member>
        <member name="M:Docs.Excel.MiniFatTable.#ctor">
            <summary>
            Constructor builds the MiniFat array.
            </summary>
        </member>
        <member name="M:Docs.Excel.MiniFatTable.#ctor(Docs.Excel.CompoundFile)">
            <summary>
            Read MiniFat table from compound file.
            </summary>
        </member>
        <member name="M:Docs.Excel.MiniFatTable.FindChain(System.Int32)">
            <summary>
            Find all items of sector chain.
            </summary>
            <param name="StartNumber"> First number of blocks chain in FAT table</param>
        </member>
        <member name="P:Docs.Excel.MiniFatTable.Item(System.Int32)">
            <summary>
            Gets one block from MiniFAT table with the specified index.
            </summary>
        </member>
        <member name="T:Docs.Excel.Sector">
            <summary>
            One sectors's blok.
            </summary>
        </member>
        <member name="M:Docs.Excel.Sector.GetStream">
            Returns a stream of the data.
        </member>
        <member name="T:Docs.Excel.SectorCollection">
            <summary>
            Keeps an array of sectors, each is 512 bytes.
            </summary>
        </member>
        <member name="F:Docs.Excel.SectorCollection.SectorList">
            The class contains all ExemplarSector.
        </member>
        <member name="M:Docs.Excel.SectorCollection.#ctor">
            Constructor.
        </member>
        <member name="M:Docs.Excel.SectorCollection.Add(Docs.Excel.Sector)">
            Add new sector to array list.
            <param name="ExempSect">new sector</param>
        </member>
        <member name="P:Docs.Excel.SectorCollection.Item(System.Int32)">
            Represents the class as an arraylist with indexer.
        </member>
        <member name="P:Docs.Excel.SectorCollection.Count">
            Returns the count of sectors.
        </member>
        <member name="T:Docs.Excel.TypeOfBiffRecord">
            <summary>
            Represents of currently supported/known Excel record id's.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Bof">
            <summary>
            BOF
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Boundsheet">
            <summary>
            BOUNDSHEET
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Index">
            <summary>
            INDEX
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.DbCell">
            <summary>
            DBCELL
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Row">
            <summary>
            ROW
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Continue">
            <summary>
            CONTINUE
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Sst">
            <summary>
            SST
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Blank">
            <summary>
            BLANK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.BoolErr">
            <summary>
            BOOLERR
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Formula">
            <summary>
            FORMULA
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Label">
            <summary>
            LABEL
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.LabelSst">
            <summary>
            LABELSST
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.MulBlank">
            <summary>
            MULBLANK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.MulRk">
            <summary>
            MULRK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.CellName">
            <summary>
            NAME.
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.String">
            <summary>
            STRING
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Xf">
            <summary>
            XF
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Eof">
            <summary>
            EOF
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Rk">
            <summary>
            RK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Number">
            <summary>
            NUMBER
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Array">
            <summary>
            ARRAY
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.ShrFmla">
            <summary>
            SHRFMLA
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Table">
            <summary>
            TABLE
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Font">
            <summary>
            FONT
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Format">
            <summary>
            FORMAT
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Palette">
            <summary>
            PALETTE
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Hyperlink">
            <summary>
            HLINK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Style">
            <summary>
            STYLE
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.RString">
            <summary>
            RSTRING
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Dimension">
            <summary>
            DIMENSION
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.MergedCells">
            <summary>
            MERGEDCELLS
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Window1">
            <summary>
            WINDOW1
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Window2">
            <summary>
            WINDOW2
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.DateMode">
            <summary>
            DATEMODE
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.ColInfo">
            <summary>
            COLINFO
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.DefColumnWidth">
            <summary>
            DEFCOLWIDTH
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.SupBook">
            <summary>
            SUPBOOK
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.ExternSheet">
            <summary>
            EXTERNSHEET
            </summary>
        </member>
        <member name="F:Docs.Excel.TypeOfBiffRecord.Obj">
            <summary>
            Describes a Graphic Object
            </summary>
        </member>
        <member name="T:Docs.Excel.ProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:ExcelWorkbook.SavingProgress"/> and <see cref="!:ExcelWorkbook.ReadingProgress"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An ProgressEventArgs that contains event data.</param>
        </member>
        <member name="T:Docs.Excel.ExcelWorkbook">
            <summary>
            Represents a ExcelWorkbook.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.SetLicenseCode(System.String)">
            <summary>
            Checks the specified license code for authenticity.
            </summary>
            <param name="LicenseCode">The specified license code.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.#ctor">
            <summary>
            Creats new blank ExcelWorkbook (without ExcelWorksheets).
            <remarks>
            To add new ExcelWorksheets use <see cref="P:Docs.Excel.ExcelWorkbook.Worksheets"/> property, <see cref="M:Docs.Excel.ExcelWorksheetCollection.Add(System.String)"/> method.
            </remarks>
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.InitTables">
            <summary>
            Initializes a tables of ExcelWorkbook(ColorPalette, ExcelFontCollection, XFCollection, FormatCollection,
            DefinedStyleCollection, BoundSheetCollection, HyperlinkCollection, ExcelWorksheetCollection, _3DRefCollection)
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.CreateBasicRecords">
            <summary>
            Fills the collection with standard data.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.CreateFileStream(System.String)">
            <summary>
            Open the stream, load the stream to read only but set share to read write so that we can open files open by other applications such as excel itself.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.String)">
            <summary>
            Reads the XLS file and loads the workbook.
            </summary>
            <param name="fileName">Name of xls file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Docs.Excel.ExcelWorkbook.ReadXLS(System.String,Docs.Excel.ProgressEventHandler)" -->
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.String,System.String)">
            <summary>
            Reads the XLS file and loads the workbook.
            </summary>
            <param name="fileName">Name of xls file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.String,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLS file and loads the workbook.
            </summary>
            <param name="fileName">Name of xls file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.Uri)">
            <summary>
            Reads the XLS file from remote URL address.
            </summary>
            <param name="XlsUrlAddress">URL of XLS file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.Uri,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLS file from remote URL address.
            </summary>
            <param name="XlsUrlAddress">URL of XLS file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.Uri,System.String)">
            <summary>
            Reads the XLS file from remote URL address.
            </summary>
            <param name="xlsUrlAddress">URL of XLS file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.Uri,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLS file from remote URL address.
            </summary>
            <param name="xlsUrlAddress">URL of XLS file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.IO.Stream)">
            <summary>
            Reads the XLS file from the stream.
            </summary>
            <param name="excelStream">The stream of an Excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.IO.Stream,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLS file from the stream.
            </summary>
            <param name="excelStream">The stream of an Excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.IO.Stream,System.String)">
            <summary>
            Reads the XLS file from the stream.
            </summary>
            <param name="excelStream">The stream of an Excel file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLS(System.IO.Stream,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLS file from the stream.
            </summary>
            <param name="excelStream">The stream of an Excel file.</param>
            <param name="password">Password for decrypting workbook.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadWorkbookStream(System.IO.MemoryStream)">
            <summary>
            Reads the workbook from WorkbookStream var.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.String)">
            <summary>
            Reads the XLSX file and loads the workbook.
            </summary>
            <param name="fileName">Name of Excel XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file and loads the workbook.
            </summary>
            <param name="fileName">Name of Excel XLSX file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.String,System.String)">
            <summary>
            Reads the XLSX file and loads the workbook.
            </summary>
            <param name="fileName">Name of Excel XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.String,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file and loads the workbook.
            </summary>
            <param name="fileName">Name of Excel XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.Uri)">
            <summary>
            Reads the XLSX file from remote URL address.
            </summary>
            <param name="XlsxUrlAddress">URL of XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.Uri,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file from remote URL address.
            </summary>
            <param name="XlsxUrlAddress">URL of XLSX file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.Uri,System.String)">
            <summary>
            Reads the XLSX file from remote URL address.
            </summary>
            <param name="xlsxUrlAddress">URL of XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.Uri,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file from remote URL address.
            </summary>
            <param name="xlsxUrlAddress">URL of XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.IO.Stream)">
            <summary>
            Reads the XLSX file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.IO.Stream,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel XLSX file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.IO.Stream,System.String)">
            <summary>
            Reads the XLSX file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadXLSX(System.IO.Stream,System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads the XLSX file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel XLSX file.</param>
            <param name="password">Password for decrypting excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.String)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="fileName">CSV or TXT file name.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.String,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="fileName">CSV or TXT file name.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.String,System.Char,System.Text.Encoding)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="fileName">CSV or TXT file name.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param> 
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.String,System.Char,System.Text.Encoding,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="fileName">CSV or TXT file name.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.Uri)">
            <summary>
            Reads CSV TXT files from remote URL address.
            </summary>
            <param name="csvUrlAddress">URL of CSV or TXT file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.Uri,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files from remote URL address.
            </summary>
            <param name="csvUrlAddress">URL of CSV or TXT file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.Uri,System.Char,System.Text.Encoding)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="csvUrlAddress">URL of CSV or TXT file.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.Uri,System.Char,System.Text.Encoding,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="csvUrlAddress">URL of CSV or TXT file.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.IO.Stream)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="csvStream">The stream of CSV or TXT file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.IO.Stream,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="csvStream">The stream of CSV or TXT file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.IO.Stream,System.Char,System.Text.Encoding)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="CsvStream">The stream of CSV or TXT file.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadCSV(System.IO.Stream,System.Char,System.Text.Encoding,Docs.Excel.ProgressEventHandler)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="CsvStream">The stream of CSV or TXT file.</param>
            <param name="csvDelimeter">Char that separates cells.</param>
            <param name="characterEncoding">Charset Excel file.</param>
            <param name="readingProgressHandler">The reference to handler of event ExcelWorkbook.ReadingProgress.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteXLS(System.String)">
            <summary>
            Writes the Workbook to the XLS file.
            </summary>
            <param name="FileName">Name of created XLS file.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteXLS">
            <summary>
            Creates in memory a new XLS file which contains current Workbook.
            </summary>
            <returns>XLS file as a MemoryStream.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteWorkbookStream">
            <summary>
            Writes current Workbook to a MemoryStream.
            </summary>
            <returns>The MemoryStream which contains current Workbook.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteXLSX(System.String)">
            <summary>
            Writes the Workbook to the XLSX file.
            </summary>
            <param name="FileName">Name of created XLSX file.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteXLSX">
            <summary>
            Creates in memory a new XLSX file which contains current Workbook.
            </summary>
            <returns>XLSX file as a MemoryStream.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteCSV(System.String)">
            <summary>
            Created a new .CSV file which contains current Workbook.
            </summary>
            <param name="FileName">Name of created .csv file.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteCSV">
            <summary>
            Created in memory a new .CSV file which contains current Workbook.
            </summary>
            <returns>.CSV file as a MemoryStream.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.CreatedStyleCollections(Docs.Excel.BasicExcelCellStyle,Docs.Excel.ExcelCellFontCollection,Docs.Excel.FormatCollection,Docs.Excel.XFCollection)">
            <summary>
            Create a custom table of Xf, format and font and placement xf-indices in cells.
            </summary>
            <param name="Style">Style for processing.</param>
            <param name="Fonts">The instance of class ExcelFontCollection in which will adding the ExcelCellFont.</param>
            <param name="Formats">The instance of class FormatCollection in which will adding the Format.</param>
            <param name="XFTable">The instance of class XFCollection in which will adding the Xfrecord.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.WriteToDataSet">
            <summary>
            Allows to get data of ExcelWorkbook as a <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <returns>An instance of class DataSet.</returns>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.ReadFromDataSet(System.Data.DataSet)">
            <summary>
            Adds all <see cref="T:System.Data.DataTable"/> to the ExcelWorkbook from specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="Dataset">The specified DataSet.</param>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.GetListNamesOfCells">
            <summary>
            Returns array of defined names of cells.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelWorkbook.GetCellByName(System.String)">
            <summary>
            Returns cell with specified defined name.
            </summary>
            <param name="cellName">Defined name.</param>
        </member>
        <member name="E:Docs.Excel.ExcelWorkbook.Progress">
            <summary>
            Occurs when was wrote some part input file.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorkbook.Worksheets">
            <summary>
            Gets the collection of Excel Worksheets (<see cref="T:Docs.Excel.ExcelWorksheet"/>). 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelWorkbook.Options">
            <summary>
            Represent option of ExcelWorkbook.
            </summary>
        </member>
        <member name="T:Docs.Excel.ExcelCellHyperlink">
            <summary>
            Allows to created hyperlink to URL, to external file, to cell in the workbook.
            </summary>
        </member>
        <member name="M:Docs.Excel.ExcelCellHyperlink.#ctor(Docs.Excel.BasicExcelCell)">
            <summary>
            Initializes a new instance of the ExcelCellHyperlink class.
            </summary>
            <param name="Cell">ExcelCell that will contain the created ExcelCellHyperlink.</param>
        </member>
        <member name="M:Docs.Excel.ExcelCellHyperlink.GetTypeOfHyperlink(System.String@)">
            <summary>
            Returns a type of specified hyperlink string.
            </summary>
            <param name="Link">The specified hyperlink string</param>
            <returns>The type of hyperlink string.</returns>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.Link">
            <summary>
            Gets or sets the address string for hyperlink.
            <remarks>
            Example of WWW link: "www.wikipedia."<br />
            Example of Internal link: "Sheet1!B2" (Note: the address must contain worksheet name)</remarks>
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.Description">
            <summary>
            Gets or sets the description string for hyperlink. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.Tooltip">
            <summary>
            Gets or sets the tooltip string for hyperlink. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.TypeOfLink">
            <summary>
            Gets or sets the type of hyperlink. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.StreamVersion">
            <summary>
            Gets a StreamVersion. 
            </summary>
        </member>
        <member name="P:Docs.Excel.ExcelCellHyperlink.MonikerGuid">
            <summary>
            Gets a MonikerGuid for this hyperlink. 
            </summary>
        </member>
        <member name="T:Docs.Excel.HSLColor">
            <summary>
            Represent HSL(Hue, Saturation, Luminosity) color.
            </summary>
        </member>
        <member name="M:Docs.Excel.HSLColor.#ctor">
            <summary>
            Initializes a new instance of class XFRecord.
            </summary>
        </member>
        <member name="T:Docs.Excel.ProgressEventArgs">
            <summary>
            Holds event data for events <see cref="!:ExcelWorkbook.SavingProgress"/> and <see cref="!:ExcelWorkbook.ReadingProgress"/>.
            </summary>
        </member>
        <member name="M:Docs.Excel.ProgressEventArgs.#ctor(System.Single)">
            <summary>
            Initializes the event and pass the start value of percent.
            </summary>
            <param name="percent">Percent value of progress.</param>
        </member>
        <member name="P:Docs.Excel.ProgressEventArgs.Percent">
            <summary>
            Percent value of progress.
            </summary>
        </member>
        <member name="T:Docs.Excel.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Docs.Excel.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Docs.Excel.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Docs.Serial.Check">
            <summary>
            Verification of License Key
            </summary>
            <param name="SerialKey">String of characters.</param>
            <returns>True - if the key is correct.</returns>
        </member>
        <member name="T:Docs.Excel.StringFactory">
            <summary>
            Utility class for reading Text from BinaryReaders
            </summary>
        </member>
        <member name="M:Docs.Excel.StringFactory.ReadSimpleUnicodeString(System.IO.BinaryReader)">
            <summary>
            Reads a string where the first 2 bytes are its length and is followed by unicode characters.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.ReadSimpleAsciiString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an ascii string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.ReadSimpleUnicodeString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a unicode string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.ReadComplexString(System.IO.BinaryReader)">
            <summary>
            Reads an encoded string where the length is followed by options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.ReadComplexString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an encoded string given its length where the first byte are options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The string length.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.GetUnicodeBytes(System.String,Docs.Excel.TypeOfInputString)">
            <summary>
            Converts the specified string to an array of bytes.
            </summary>
            <param name="InputString">The string to convert.</param>
            <param name="TypeOfString">Type of string for converts.</param>
            <returns>Returns the specified string as an array of bytes.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.InitDescriptionByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for description string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.InitLinkByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for link string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.InitNullTerminatedByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for null-terminated string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:Docs.Excel.StringFactory.InitUTP16ByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for UTF16 string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="T:Docs.Excel.XlsHeader">
            <summary>
            Represents excel file header. 
            </summary>
        </member>
        <member name="M:Docs.Excel.XlsHeader.#ctor(Docs.Excel.Sector)">
            <summary>
            Reads data from stream of excel file.
            </summary>
            <param name="InputSector">The sector with header of excel file.</param>
        </member>
        <member name="T:Docs.Excel.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:Docs.Excel.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:Docs.Excel.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Docs.Excel.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Docs.Excel.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Docs.Excel.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:Docs.Excel.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:Docs.Excel.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:Docs.Excel.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:Docs.Excel.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:Docs.Excel.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Docs.Excel.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:Docs.Excel.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:Docs.Excel.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Docs.Excel.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:Docs.Excel.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:Docs.Excel.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Docs.Excel.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:Docs.Excel.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Docs.Excel.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:Docs.Excel.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Docs.Excel.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:Docs.Excel.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Docs.Excel.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:Docs.Excel.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:Docs.Excel.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:Docs.Excel.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:Docs.Excel.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:Docs.Excel.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:Docs.Excel.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:Docs.Excel.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.ScanEventArgs"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Docs.Excel.ScanEventArgs.Name">
            <summary>
            The name for this event.
            </summary>
        </member>
        <member name="P:Docs.Excel.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:Docs.Excel.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:Docs.Excel.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:Docs.Excel.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:Docs.Excel.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:Docs.Excel.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:Docs.Excel.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:Docs.Excel.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:Docs.Excel.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:Docs.Excel.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:Docs.Excel.ProcessDirectoryDelegate">
            <summary>
            Delegate invoked when a directory is processed.
            </summary>
        </member>
        <member name="T:Docs.Excel.ProcessFileDelegate">
            <summary>
            Delegate invoked when a file is processed.
            </summary>
        </member>
        <member name="T:Docs.Excel.DirectoryFailureDelegate">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
        </member>
        <member name="T:Docs.Excel.FileFailureDelegate">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
        </member>
        <member name="T:Docs.Excel.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:Docs.Excel.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:Docs.Excel.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Docs.Excel.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.#ctor(Docs.Excel.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Docs.Excel.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.#ctor(Docs.Excel.IScanFilter,Docs.Excel.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Docs.Excel.IScanFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:Docs.Excel.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:Docs.Excel.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:Docs.Excel.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives.
            </summary>
        </member>
        <member name="M:Docs.Excel.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:Docs.Excel.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="T:Docs.Excel.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:Docs.Excel.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:Docs.Excel.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'
            Each expression can be prefixed by a plus '+' sign or a minus '-' sign to denote the expression
            is intended to include or exclude names.  If neither a plus or minus sign is found include is the default
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:Docs.Excel.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:Docs.Excel.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:Docs.Excel.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:Docs.Excel.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="M:Docs.Excel.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:Docs.Excel.NameFilter"></see>filter expression to apply.</param>
        </member>
        <member name="M:Docs.Excel.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
        </member>
        <member name="T:Docs.Excel.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:Docs.Excel.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:Docs.Excel.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:Docs.Excel.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:Docs.Excel.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:Docs.Excel.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:Docs.Excel.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:Docs.Excel.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:Docs.Excel.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:Docs.Excel.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:Docs.Excel.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:Docs.Excel.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:Docs.Excel.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:Docs.Excel.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:Docs.Excel.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
        </member>
        <member name="M:Docs.Excel.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
        </member>
        <member name="M:Docs.Excel.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:Docs.Excel.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:Docs.Excel.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:Docs.Excel.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:Docs.Excel.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:Docs.Excel.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:Docs.Excel.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:Docs.Excel.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:Docs.Excel.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Docs.Excel.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:Docs.Excel.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Docs.Excel.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:Docs.Excel.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:Docs.Excel.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:Docs.Excel.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:Docs.Excel.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:Docs.Excel.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:Docs.Excel.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:Docs.Excel.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Docs.Excel.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:Docs.Excel.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Docs.Excel.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Docs.Excel.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:Docs.Excel.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Docs.Excel.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Docs.Excel.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Docs.Excel.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:Docs.Excel.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Docs.Excel.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:Docs.Excel.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Docs.Excel.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:Docs.Excel.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:Docs.Excel.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Docs.Excel.Deflater.SetStrategy(Docs.Excel.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Docs.Excel.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:Docs.Excel.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:Docs.Excel.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:Docs.Excel.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:Docs.Excel.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Docs.Excel.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:Docs.Excel.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Docs.Excel.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Docs.Excel.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:Docs.Excel.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Docs.Excel.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:Docs.Excel.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Docs.Excel.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:Docs.Excel.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:Docs.Excel.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.#ctor(Docs.Excel.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:Docs.Excel.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:Docs.Excel.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:Docs.Excel.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Docs.Excel.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:Docs.Excel.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.#ctor(Docs.Excel.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.CalcBLFreq(Docs.Excel.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterHuffman.Tree.WriteTree(Docs.Excel.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:Docs.Excel.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:Docs.Excel.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Docs.Excel.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            The output array.
            </param>
            <param name="offset">
            The offset into output array.
            </param>
            <param name="length">
            The maximum number of bytes to store.
            </param>
        </member>
        <member name="M:Docs.Excel.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:Docs.Excel.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:Docs.Excel.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:Docs.Excel.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Docs.Excel.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:Docs.Excel.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Docs.Excel.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:Docs.Excel.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Docs.Excel.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Docs.Excel.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Docs.Excel.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:Docs.Excel.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Docs.Excel.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:Docs.Excel.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Docs.Excel.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Docs.Excel.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Docs.Excel.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Docs.Excel.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Docs.Excel.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Docs.Excel.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:Docs.Excel.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:Docs.Excel.InflaterHuffmanTree.GetSymbol(Docs.Excel.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:Docs.Excel.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.#ctor(System.IO.Stream,Docs.Excel.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.#ctor(System.IO.Stream,Docs.Excel.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:Docs.Excel.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:Docs.Excel.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:Docs.Excel.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:Docs.Excel.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:Docs.Excel.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:Docs.Excel.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:Docs.Excel.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="T:Docs.Excel.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:Docs.Excel.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.SetInflaterInput(Docs.Excel.Inflater)">
            <summary>
            Call <see cref="M:Docs.Excel.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:Docs.Excel.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:Docs.Excel.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:Docs.Excel.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="!:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.#ctor(System.IO.Stream,Docs.Excel.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.#ctor(System.IO.Stream,Docs.Excel.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is less than zero
            </exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:Docs.Excel.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:Docs.Excel.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:Docs.Excel.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:Docs.Excel.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:Docs.Excel.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Docs.Excel.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:Docs.Excel.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:Docs.Excel.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Docs.Excel.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Docs.Excel.OutputWindow.CopyStored(Docs.Excel.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Docs.Excel.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Docs.Excel.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Docs.Excel.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Docs.Excel.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Docs.Excel.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Docs.Excel.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:Docs.Excel.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:Docs.Excel.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:Docs.Excel.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:Docs.Excel.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:Docs.Excel.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:Docs.Excel.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:Docs.Excel.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:Docs.Excel.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:Docs.Excel.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:Docs.Excel.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:Docs.Excel.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Docs.Excel.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raises the <see cref="F:Docs.Excel.FastZipEvents.FileFailure">file failure delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Docs.Excel.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Raises the <see cref="F:Docs.Excel.FastZipEvents.ProcessFile">Process File delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Docs.Excel.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:Docs.Excel.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if directory has matching files as determined by the current filter.</param>
        </member>
        <member name="T:Docs.Excel.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="M:Docs.Excel.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Docs.Excel.FastZip"/>.
            </summary>
        </member>
        <member name="M:Docs.Excel.FastZip.#ctor(Docs.Excel.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:Docs.Excel.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="M:Docs.Excel.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:Docs.Excel.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Docs.Excel.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:Docs.Excel.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:Docs.Excel.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:Docs.Excel.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Docs.Excel.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:Docs.Excel.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:Docs.Excel.FastZip.ExtractZip(System.String,System.String,Docs.Excel.FastZip.Overwrite,Docs.Excel.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:Docs.Excel.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating wether to restore the date and time for extracted files.</param>
        </member>
        <member name="P:Docs.Excel.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:Docs.Excel.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:Docs.Excel.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:Docs.Excel.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:Docs.Excel.FastZip.EntryFactory"></seealso>
        </member>
        <member name="P:Docs.Excel.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:Docs.Excel.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:Docs.Excel.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:Docs.Excel.FastZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:Docs.Excel.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:Docs.Excel.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:Docs.Excel.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:Docs.Excel.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:Docs.Excel.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:Docs.Excel.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:Docs.Excel.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:Docs.Excel.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns></returns>
        </member>
        <member name="P:Docs.Excel.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:Docs.Excel.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="T:Docs.Excel.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:Docs.Excel.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:Docs.Excel.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:Docs.Excel.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:Docs.Excel.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:Docs.Excel.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:Docs.Excel.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:Docs.Excel.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:Docs.Excel.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:Docs.Excel.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:Docs.Excel.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:Docs.Excel.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.RC4">
            <summary>
            RCS has been used for encryption.
            </summary>
        </member>
        <member name="F:Docs.Excel.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:Docs.Excel.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:Docs.Excel.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Docs.Excel.ZipInputStream.CanDecompressEntry"/>.
            </remarks>
        </member>
        <member name="F:Docs.Excel.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Docs.Excel.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:Docs.Excel.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Docs.Excel.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:Docs.Excel.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:Docs.Excel.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system Ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:Docs.Excel.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:Docs.Excel.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:Docs.Excel.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:Docs.Excel.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipEntry.#ctor(System.String,System.Int32,System.Int32,Docs.Excel.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:Docs.Excel.ZipEntry.#ctor(Docs.Excel.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:Docs.Excel.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:Docs.Excel.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:Docs.Excel.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Docs.Excel.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:Docs.Excel.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipEntry.IsCompressionMethodSupported(Docs.Excel.CompressionMethod)">
            <summary>
            Test a <see cref="P:Docs.Excel.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:Docs.Excel.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">Name to clean</param>
            <remarks>
            The <seealso cref="T:Docs.Excel.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:Docs.Excel.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in Unicode UTF8
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:Docs.Excel.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:Docs.Excel.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating wether this entry can be decompressed by the library.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>		
        </member>
        <member name="P:Docs.Excel.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:Docs.Excel.ZipNameTransform"/> class, or <see cref="M:Docs.Excel.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Docs.Excel.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:Docs.Excel.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:Docs.Excel.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:Docs.Excel.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:Docs.Excel.ZipFile"/> class.
            The <see cref="T:Docs.Excel.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:Docs.Excel.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:Docs.Excel.IEntryFactory"></see>
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:Docs.Excel.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:Docs.Excel.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipEntryFactory.#ctor(Docs.Excel.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.ZipEntryFactory"/> using the specified <see cref="T:Docs.Excel.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:Docs.Excel.ZipEntryFactory.TimeSetting">time setting</see>  to use when creating <see cref="T:Docs.Excel.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:Docs.Excel.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:Docs.Excel.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="M:Docs.Excel.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new ZipEntry for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:Docs.Excel.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Docs.Excel.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:Docs.Excel.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:Docs.Excel.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="P:Docs.Excel.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:Docs.Excel.INameTransform"/> to be used when creating new <see cref="T:Docs.Excel.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:Docs.Excel.ZipNameTransform"></see> to be used.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:Docs.Excel.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:Docs.Excel.ZipEntryFactory.Setting"/> is set to <see cref="F:Docs.Excel.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:Docs.Excel.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="T:Docs.Excel.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:Docs.Excel.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:Docs.Excel.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:Docs.Excel.ZipEntryFactory.#ctor(Docs.Excel.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:Docs.Excel.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.</remarks>
        </member>
        <member name="T:Docs.Excel.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Docs.Excel.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Docs.Excel.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Docs.Excel.ZipExtraData">
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:Docs.Excel.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:Docs.Excel.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:Docs.Excel.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:Docs.Excel.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:Docs.Excel.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:Docs.Excel.ZipExtraData.AddEntry(System.Int32,System.Byte[])"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Docs.Excel.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:Docs.Excel.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only value if <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)"/> has previsouly returned true.</remarks>
        </member>
        <member name="P:Docs.Excel.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:Docs.Excel.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially it will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:Docs.Excel.ZipExtraData.ReadInt"/>, <see cref="M:Docs.Excel.ZipExtraData.ReadShort"/> and <see cref="M:Docs.Excel.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:Docs.Excel.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:Docs.Excel.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:Docs.Excel.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:Docs.Excel.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:Docs.Excel.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:Docs.Excel.KeysRequiredEventArgs.Key">
            <summary>
            Get/set the key value
            </summary>
        </member>
        <member name="T:Docs.Excel.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:Docs.Excel.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:Docs.Excel.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:Docs.Excel.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:Docs.Excel.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:Docs.Excel.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:Docs.Excel.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:Docs.Excel.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:Docs.Excel.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:Docs.Excel.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:Docs.Excel.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:Docs.Excel.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:Docs.Excel.TestStatus">
            <summary>
            Status returned returned by <see cref="T:Docs.Excel.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:Docs.Excel.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:Docs.Excel.TestStatus.#ctor(Docs.Excel.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:Docs.Excel.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:Docs.Excel.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:Docs.Excel.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:Docs.Excel.TestStatus.File">
            <summary>
            Get the <see cref="T:Docs.Excel.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:Docs.Excel.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:Docs.Excel.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:Docs.Excel.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:Docs.Excel.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:Docs.Excel.ZipFile.TestArchive(System.Boolean,Docs.Excel.TestStrategy,Docs.Excel.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:Docs.Excel.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:Docs.Excel.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:Docs.Excel.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:Docs.Excel.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:Docs.Excel.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:Docs.Excel.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:Docs.Excel.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:Docs.Excel.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:Docs.Excel.ZipFile"/></returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:Docs.Excel.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:Docs.Excel.ZipFile"/></returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetInputStream(Docs.Excel.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="!:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="!:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipFile.TestArchive(System.Boolean,Docs.Excel.TestStrategy,Docs.Excel.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:Docs.Excel.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:Docs.Excel.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.TestLocalHeader(Docs.Excel.ZipEntry,Docs.Excel.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:Docs.Excel.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.BeginUpdate(Docs.Excel.IArchiveStorage,Docs.Excel.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:Docs.Excel.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:Docs.Excel.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:Docs.Excel.IDynamicDataSource">data source</see> to utilise during updating.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.BeginUpdate(Docs.Excel.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:Docs.Excel.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:Docs.Excel.ZipFile"/> archive.
            </summary>
            <seealso cref="M:Docs.Excel.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:Docs.Excel.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:Docs.Excel.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:Docs.Excel.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:Docs.Excel.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:Docs.Excel.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:Docs.Excel.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:Docs.Excel.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:Docs.Excel.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:Docs.Excel.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(System.String,Docs.Excel.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(System.String,Docs.Excel.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(Docs.Excel.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(Docs.Excel.IStaticDataSource,System.String,Docs.Excel.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(Docs.Excel.IStaticDataSource,System.String,Docs.Excel.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Add(Docs.Excel.ZipEntry)">
            <summary>
            Add a <see cref="T:Docs.Excel.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.Delete(Docs.Excel.ZipEntry)">
            <summary>
            Delete a <see cref="T:Docs.Excel.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetDescriptorSize(Docs.Excel.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:Docs.Excel.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.GetOutputStream(Docs.Excel.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:Docs.Excel.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="!:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipFile.LocateEntry(Docs.Excel.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="!:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="P:Docs.Excel.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:Docs.Excel.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:Docs.Excel.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:Docs.Excel.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:Docs.Excel.ZipFile"/>.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:Docs.Excel.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:Docs.Excel.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:Docs.Excel.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.ZipUpdate.#ctor(Docs.Excel.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:Docs.Excel.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:Docs.Excel.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:Docs.Excel.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:Docs.Excel.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:Docs.Excel.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:Docs.Excel.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.ZipString.op_Implicit(Docs.Excel.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:Docs.Excel.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:Docs.Excel.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:Docs.Excel.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:Docs.Excel.ZipFile.PartialInputStream"/> is an <see cref="T:Docs.Excel.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipFile.PartialInputStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:Docs.Excel.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="baseStream">The underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:Docs.Excel.ZipFile.PartialInputStream.SkipBytes(System.Int64)">
            <summary>
            Skip the specified number of input bytes.
            </summary>
            <param name="count">The maximum number of input bytes to skip.</param>
            <returns>The actuial number of input bytes skipped.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:Docs.Excel.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:Docs.Excel.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:Docs.Excel.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:Docs.Excel.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:Docs.Excel.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:Docs.Excel.IDynamicDataSource.GetSource(Docs.Excel.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:Docs.Excel.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:Docs.Excel.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:Docs.Excel.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:Docs.Excel.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:Docs.Excel.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:Docs.Excel.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:Docs.Excel.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:Docs.Excel.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:Docs.Excel.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Docs.Excel.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:Docs.Excel.DynamicDiskDataSource.GetSource(Docs.Excel.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:Docs.Excel.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="M:Docs.Excel.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:Docs.Excel.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:Docs.Excel.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:Docs.Excel.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:Docs.Excel.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Docs.Excel.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:Docs.Excel.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:Docs.Excel.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:Docs.Excel.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="T:Docs.Excel.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:Docs.Excel.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.#ctor(Docs.Excel.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Docs.Excel.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:Docs.Excel.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:Docs.Excel.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:Docs.Excel.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Docs.Excel.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:Docs.Excel.DiskArchiveStorage">
            <summary>
            An <see cref="T:Docs.Excel.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.#ctor(Docs.Excel.ZipFile,Docs.Excel.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Docs.Excel.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.#ctor(Docs.Excel.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Docs.Excel.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:Docs.Excel.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Docs.Excel.MemoryArchiveStorage">
            <summary>
            An <see cref="T:Docs.Excel.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Docs.Excel.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.#ctor(Docs.Excel.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Docs.Excel.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:Docs.Excel.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:Docs.Excel.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Docs.Excel.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:Docs.Excel.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="T:Docs.Excel.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Docs.Excel.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Docs.Excel.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:Docs.Excel.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			while ((theEntry = s.GetNextEntry()) != null) {
             				int size = 2048;
             				byte[] data = new byte[2048];
            
             				Console.Write("Show contents (y/n) ?");
             				if (Console.ReadLine() == "y") {
             					while (true) {
             						size = s.Read(data, 0, data.Length);
             						if (size > 0) {
             							Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             						} else {
             							break;
             						}
             					}
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:Docs.Excel.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:Docs.Excel.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:Docs.Excel.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry  and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:Docs.Excel.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:Docs.Excel.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="T:Docs.Excel.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Docs.Excel.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Docs.Excel.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from front of paths if found.</param>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:Docs.Excel.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="P:Docs.Excel.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="T:Docs.Excel.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Core;
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:Docs.Excel.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:Docs.Excel.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Docs.Excel.Deflater"/>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.PutNextEntry(Docs.Excel.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:Docs.Excel.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Docs.Excel.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:Docs.Excel.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:Docs.Excel.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="P:Docs.Excel.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
    </members>
</doc>
